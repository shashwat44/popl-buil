{"version":3,"sources":["node_modules/@angular/cdk/esm2015/bidi.js","node_modules/@angular/cdk/esm2015/cdk.js","node_modules/@angular/cdk/esm2015/overlay.js","node_modules/@angular/cdk/esm2015/scrolling.js","node_modules/@angular/material/esm2015/core.js"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { DOCUMENT } from '@angular/common';\nimport { inject, InjectionToken, EventEmitter, Inject, Injectable, Optional, Directive, Output, Input, NgModule, ɵɵdefineInjectable, ɵɵinject } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token used to inject the document into Directionality.\n * This is used so that the value can be faked in tests.\n *\n * We can't use the real document in tests because changing the real `dir` causes geometry-based\n * tests in Safari to fail.\n *\n * We also can't re-provide the DOCUMENT token from platform-brower because the unit tests\n * themselves use things like `querySelector` in test code.\n *\n * This token is defined in a separate file from Directionality as a workaround for\n * https://github.com/angular/angular/issues/22559\n *\n * \\@docs-private\n * @type {?}\n */\nconst DIR_DOCUMENT = new InjectionToken('cdk-dir-doc', {\n    providedIn: 'root',\n    factory: DIR_DOCUMENT_FACTORY,\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction DIR_DOCUMENT_FACTORY() {\n    return inject(DOCUMENT);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The directionality (LTR / RTL) context for the application (or a subtree of it).\n * Exposes the current direction and a stream of direction changes.\n */\nclass Directionality {\n    /**\n     * @param {?=} _document\n     */\n    constructor(_document) {\n        /**\n         * The current 'ltr' or 'rtl' value.\n         */\n        this.value = 'ltr';\n        /**\n         * Stream that emits whenever the 'ltr' / 'rtl' state changes.\n         */\n        this.change = new EventEmitter();\n        if (_document) {\n            // TODO: handle 'auto' value -\n            // We still need to account for dir=\"auto\".\n            // It looks like HTMLElemenet.dir is also \"auto\" when that's set to the attribute,\n            // but getComputedStyle return either \"ltr\" or \"rtl\". avoiding getComputedStyle for now\n            /** @type {?} */\n            const bodyDir = _document.body ? _document.body.dir : null;\n            /** @type {?} */\n            const htmlDir = _document.documentElement ? _document.documentElement.dir : null;\n            /** @type {?} */\n            const value = bodyDir || htmlDir;\n            this.value = (value === 'ltr' || value === 'rtl') ? value : 'ltr';\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.change.complete();\n    }\n}\nDirectionality.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] },\n];\n/** @nocollapse */\nDirectionality.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DIR_DOCUMENT,] }] }\n];\n/** @nocollapse */ Directionality.ngInjectableDef = ɵɵdefineInjectable({ factory: function Directionality_Factory() { return new Directionality(ɵɵinject(DIR_DOCUMENT, 8)); }, token: Directionality, providedIn: \"root\" });\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Directive to listen for changes of direction of part of the DOM.\n *\n * Provides itself as Directionality such that descendant directives only need to ever inject\n * Directionality to get the closest direction.\n */\nclass Dir {\n    constructor() {\n        /**\n         * Normalized direction that accounts for invalid/unsupported values.\n         */\n        this._dir = 'ltr';\n        /**\n         * Whether the `value` has been set to its initial value.\n         */\n        this._isInitialized = false;\n        /**\n         * Event emitted when the direction changes.\n         */\n        this.change = new EventEmitter();\n    }\n    /**\n     * \\@docs-private\n     * @return {?}\n     */\n    get dir() { return this._dir; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set dir(value) {\n        /** @type {?} */\n        const old = this._dir;\n        /** @type {?} */\n        const normalizedValue = value ? value.toLowerCase() : value;\n        this._rawDir = value;\n        this._dir = (normalizedValue === 'ltr' || normalizedValue === 'rtl') ? normalizedValue : 'ltr';\n        if (old !== this._dir && this._isInitialized) {\n            this.change.emit(this._dir);\n        }\n    }\n    /**\n     * Current layout direction of the element.\n     * @return {?}\n     */\n    get value() { return this.dir; }\n    /**\n     * Initialize once default value has been set.\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._isInitialized = true;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.change.complete();\n    }\n}\nDir.decorators = [\n    { type: Directive, args: [{\n                selector: '[dir]',\n                providers: [{ provide: Directionality, useExisting: Dir }],\n                host: { '[attr.dir]': '_rawDir' },\n                exportAs: 'dir',\n            },] },\n];\nDir.propDecorators = {\n    change: [{ type: Output, args: ['dirChange',] }],\n    dir: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass BidiModule {\n}\nBidiModule.decorators = [\n    { type: NgModule, args: [{\n                exports: [Dir],\n                declarations: [Dir],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { Directionality, DIR_DOCUMENT, Dir, BidiModule, DIR_DOCUMENT_FACTORY as ɵa };\n//# sourceMappingURL=bidi.js.map\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Version } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Current version of the Angular Component Development Kit.\n * @type {?}\n */\nconst VERSION = new Version('8.2.3');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { VERSION };\n//# sourceMappingURL=cdk.js.map\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { coerceCssPixelValue, coerceArray, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ScrollDispatcher, ViewportRuler, ScrollingModule, VIEWPORT_RULER_PROVIDER } from '@angular/cdk/scrolling';\nexport { ViewportRuler, VIEWPORT_RULER_PROVIDER, CdkScrollable, ScrollDispatcher } from '@angular/cdk/scrolling';\nimport { DOCUMENT, Location } from '@angular/common';\nimport { Inject, Injectable, NgZone, Optional, NgModule, SkipSelf, ApplicationRef, ComponentFactoryResolver, Injector, ElementRef, Directive, EventEmitter, InjectionToken, Input, Output, TemplateRef, ViewContainerRef, ɵɵdefineInjectable, ɵɵinject } from '@angular/core';\nimport { Observable, Subject, merge, Subscription } from 'rxjs';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { Platform } from '@angular/cdk/platform';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { DomPortalOutlet, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nclass BlockScrollStrategy {\n    /**\n     * @param {?} _viewportRuler\n     * @param {?} document\n     */\n    constructor(_viewportRuler, document) {\n        this._viewportRuler = _viewportRuler;\n        this._previousHTMLStyles = { top: '', left: '' };\n        this._isEnabled = false;\n        this._document = document;\n    }\n    /**\n     * Attaches this scroll strategy to an overlay.\n     * @return {?}\n     */\n    attach() { }\n    /**\n     * Blocks page-level scroll while the attached overlay is open.\n     * @return {?}\n     */\n    enable() {\n        if (this._canBeEnabled()) {\n            /** @type {?} */\n            const root = (/** @type {?} */ (this._document.documentElement));\n            this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            // Cache the previous inline styles in case the user had set them.\n            this._previousHTMLStyles.left = root.style.left || '';\n            this._previousHTMLStyles.top = root.style.top || '';\n            // Note: we're using the `html` node, instead of the `body`, because the `body` may\n            // have the user agent margin, whereas the `html` is guaranteed not to have one.\n            root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n            root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n            root.classList.add('cdk-global-scrollblock');\n            this._isEnabled = true;\n        }\n    }\n    /**\n     * Unblocks page-level scroll while the attached overlay is open.\n     * @return {?}\n     */\n    disable() {\n        if (this._isEnabled) {\n            /** @type {?} */\n            const html = (/** @type {?} */ (this._document.documentElement));\n            /** @type {?} */\n            const body = (/** @type {?} */ (this._document.body));\n            /** @type {?} */\n            const htmlStyle = (/** @type {?} */ (html.style));\n            /** @type {?} */\n            const bodyStyle = (/** @type {?} */ (body.style));\n            /** @type {?} */\n            const previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n            /** @type {?} */\n            const previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n            this._isEnabled = false;\n            htmlStyle.left = this._previousHTMLStyles.left;\n            htmlStyle.top = this._previousHTMLStyles.top;\n            html.classList.remove('cdk-global-scrollblock');\n            // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n            // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n            htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n            window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n            htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n            bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _canBeEnabled() {\n        // Since the scroll strategies can't be singletons, we have to use a global CSS class\n        // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n        // scrolling multiple times.\n        /** @type {?} */\n        const html = (/** @type {?} */ (this._document.documentElement));\n        if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n            return false;\n        }\n        /** @type {?} */\n        const body = this._document.body;\n        /** @type {?} */\n        const viewport = this._viewportRuler.getViewportSize();\n        return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n * @return {?}\n */\nfunction getMatScrollStrategyAlreadyAttachedError() {\n    return Error(`Scroll strategy has already been attached.`);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nclass CloseScrollStrategy {\n    /**\n     * @param {?} _scrollDispatcher\n     * @param {?} _ngZone\n     * @param {?} _viewportRuler\n     * @param {?=} _config\n     */\n    constructor(_scrollDispatcher, _ngZone, _viewportRuler, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._config = _config;\n        this._scrollSubscription = null;\n        /**\n         * Detaches the overlay ref and disables the scroll strategy.\n         */\n        this._detach = (/**\n         * @return {?}\n         */\n        () => {\n            this.disable();\n            if (this._overlayRef.hasAttached()) {\n                this._ngZone.run((/**\n                 * @return {?}\n                 */\n                () => this._overlayRef.detach()));\n            }\n        });\n    }\n    /**\n     * Attaches this scroll strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    attach(overlayRef) {\n        if (this._overlayRef) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /**\n     * Enables the closing of the attached overlay on scroll.\n     * @return {?}\n     */\n    enable() {\n        if (this._scrollSubscription) {\n            return;\n        }\n        /** @type {?} */\n        const stream = this._scrollDispatcher.scrolled(0);\n        if (this._config && this._config.threshold && this._config.threshold > 1) {\n            this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n            this._scrollSubscription = stream.subscribe((/**\n             * @return {?}\n             */\n            () => {\n                /** @type {?} */\n                const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n                if (Math.abs(scrollPosition - this._initialScrollPosition) > (/** @type {?} */ ((/** @type {?} */ (this._config)).threshold))) {\n                    this._detach();\n                }\n                else {\n                    this._overlayRef.updatePosition();\n                }\n            }));\n        }\n        else {\n            this._scrollSubscription = stream.subscribe(this._detach);\n        }\n    }\n    /**\n     * Disables the closing the attached overlay on scroll.\n     * @return {?}\n     */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    detach() {\n        this.disable();\n        this._overlayRef = (/** @type {?} */ (null));\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Scroll strategy that doesn't do anything.\n */\nclass NoopScrollStrategy {\n    /**\n     * Does nothing, as this scroll strategy is a no-op.\n     * @return {?}\n     */\n    enable() { }\n    /**\n     * Does nothing, as this scroll strategy is a no-op.\n     * @return {?}\n     */\n    disable() { }\n    /**\n     * Does nothing, as this scroll strategy is a no-op.\n     * @return {?}\n     */\n    attach() { }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n// TODO(jelbourn): move this to live with the rest of the scrolling code\n// TODO(jelbourn): someday replace this with IntersectionObservers\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * \\@docs-private\n * @param {?} element Dimensions of the element (from getBoundingClientRect)\n * @param {?} scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @return {?} Whether the element is scrolled out of view\n */\nfunction isElementScrolledOutsideView(element, scrollContainers) {\n    return scrollContainers.some((/**\n     * @param {?} containerBounds\n     * @return {?}\n     */\n    containerBounds => {\n        /** @type {?} */\n        const outsideAbove = element.bottom < containerBounds.top;\n        /** @type {?} */\n        const outsideBelow = element.top > containerBounds.bottom;\n        /** @type {?} */\n        const outsideLeft = element.right < containerBounds.left;\n        /** @type {?} */\n        const outsideRight = element.left > containerBounds.right;\n        return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n    }));\n}\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * \\@docs-private\n * @param {?} element Dimensions of the element (from getBoundingClientRect)\n * @param {?} scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @return {?} Whether the element is clipped\n */\nfunction isElementClippedByScrolling(element, scrollContainers) {\n    return scrollContainers.some((/**\n     * @param {?} scrollContainerRect\n     * @return {?}\n     */\n    scrollContainerRect => {\n        /** @type {?} */\n        const clippedAbove = element.top < scrollContainerRect.top;\n        /** @type {?} */\n        const clippedBelow = element.bottom > scrollContainerRect.bottom;\n        /** @type {?} */\n        const clippedLeft = element.left < scrollContainerRect.left;\n        /** @type {?} */\n        const clippedRight = element.right > scrollContainerRect.right;\n        return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n    }));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nclass RepositionScrollStrategy {\n    /**\n     * @param {?} _scrollDispatcher\n     * @param {?} _viewportRuler\n     * @param {?} _ngZone\n     * @param {?=} _config\n     */\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        this._config = _config;\n        this._scrollSubscription = null;\n    }\n    /**\n     * Attaches this scroll strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    attach(overlayRef) {\n        if (this._overlayRef) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /**\n     * Enables repositioning of the attached overlay on scroll.\n     * @return {?}\n     */\n    enable() {\n        if (!this._scrollSubscription) {\n            /** @type {?} */\n            const throttle = this._config ? this._config.scrollThrottle : 0;\n            this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe((/**\n             * @return {?}\n             */\n            () => {\n                this._overlayRef.updatePosition();\n                // TODO(crisbeto): make `close` on by default once all components can handle it.\n                if (this._config && this._config.autoClose) {\n                    /** @type {?} */\n                    const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n                    const { width, height } = this._viewportRuler.getViewportSize();\n                    // TODO(crisbeto): include all ancestor scroll containers here once\n                    // we have a way of exposing the trigger element to the scroll strategy.\n                    /** @type {?} */\n                    const parentRects = [{ width, height, bottom: height, right: width, top: 0, left: 0 }];\n                    if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n                        this.disable();\n                        this._ngZone.run((/**\n                         * @return {?}\n                         */\n                        () => this._overlayRef.detach()));\n                    }\n                }\n            }));\n        }\n    }\n    /**\n     * Disables repositioning of the attached overlay on scroll.\n     * @return {?}\n     */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    detach() {\n        this.disable();\n        this._overlayRef = (/** @type {?} */ (null));\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\nclass ScrollStrategyOptions {\n    /**\n     * @param {?} _scrollDispatcher\n     * @param {?} _viewportRuler\n     * @param {?} _ngZone\n     * @param {?} document\n     */\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, document) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        /**\n         * Do nothing on scroll.\n         */\n        this.noop = (/**\n         * @return {?}\n         */\n        () => new NoopScrollStrategy());\n        /**\n         * Close the overlay as soon as the user scrolls.\n         * @param config Configuration to be used inside the scroll strategy.\n         */\n        this.close = (/**\n         * @param {?=} config\n         * @return {?}\n         */\n        (config) => new CloseScrollStrategy(this._scrollDispatcher, this._ngZone, this._viewportRuler, config));\n        /**\n         * Block scrolling.\n         */\n        this.block = (/**\n         * @return {?}\n         */\n        () => new BlockScrollStrategy(this._viewportRuler, this._document));\n        /**\n         * Update the overlay's position on scroll.\n         * @param config Configuration to be used inside the scroll strategy.\n         * Allows debouncing the reposition calls.\n         */\n        this.reposition = (/**\n         * @param {?=} config\n         * @return {?}\n         */\n        (config) => new RepositionScrollStrategy(this._scrollDispatcher, this._viewportRuler, this._ngZone, config));\n        this._document = document;\n    }\n}\nScrollStrategyOptions.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] },\n];\n/** @nocollapse */\nScrollStrategyOptions.ctorParameters = () => [\n    { type: ScrollDispatcher },\n    { type: ViewportRuler },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/** @nocollapse */ ScrollStrategyOptions.ngInjectableDef = ɵɵdefineInjectable({ factory: function ScrollStrategyOptions_Factory() { return new ScrollStrategyOptions(ɵɵinject(ScrollDispatcher), ɵɵinject(ViewportRuler), ɵɵinject(NgZone), ɵɵinject(DOCUMENT)); }, token: ScrollStrategyOptions, providedIn: \"root\" });\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Initial configuration used when creating an overlay.\n */\nclass OverlayConfig {\n    /**\n     * @param {?=} config\n     */\n    constructor(config) {\n        /**\n         * Strategy to be used when handling scroll events while the overlay is open.\n         */\n        this.scrollStrategy = new NoopScrollStrategy();\n        /**\n         * Custom class to add to the overlay pane.\n         */\n        this.panelClass = '';\n        /**\n         * Whether the overlay has a backdrop.\n         */\n        this.hasBackdrop = false;\n        /**\n         * Custom class to add to the backdrop\n         */\n        this.backdropClass = 'cdk-overlay-dark-backdrop';\n        /**\n         * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.disposeOnNavigation = false;\n        if (config) {\n            /** @type {?} */\n            const configKeys = (/** @type {?} */ (Object.keys(config)));\n            for (const key of configKeys) {\n                if (config[key] !== undefined) {\n                    // TypeScript, as of version 3.5, sees the left-hand-side of this expression\n                    // as \"I don't know *which* key this is, so the only valid value is the intersection\n                    // of all the posible values.\" In this case, that happens to be `undefined`. TypeScript\n                    // is not smart enough to see that the right-hand-side is actually an access of the same\n                    // exact type with the same exact key, meaning that the value type must be identical.\n                    // So we use `any` to work around this.\n                    this[key] = (/** @type {?} */ (config[key]));\n                }\n            }\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The points of the origin element and the overlay element to connect.\n */\nclass ConnectionPositionPair {\n    /**\n     * @param {?} origin\n     * @param {?} overlay\n     * @param {?=} offsetX\n     * @param {?=} offsetY\n     * @param {?=} panelClass\n     */\n    constructor(origin, overlay, offsetX, offsetY, panelClass) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n        this.panelClass = panelClass;\n        this.originX = origin.originX;\n        this.originY = origin.originY;\n        this.overlayX = overlay.overlayX;\n        this.overlayY = overlay.overlayY;\n    }\n}\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n * \\@docs-private\n */\nclass ScrollingVisibility {\n}\n/**\n * The change event emitted by the strategy when a fallback position is used.\n */\nclass ConnectedOverlayPositionChange {\n    /**\n     * @param {?} connectionPair\n     * @param {?} scrollableViewProperties\n     */\n    constructor(connectionPair, scrollableViewProperties) {\n        this.connectionPair = connectionPair;\n        this.scrollableViewProperties = scrollableViewProperties;\n    }\n}\n/** @nocollapse */\nConnectedOverlayPositionChange.ctorParameters = () => [\n    { type: ConnectionPositionPair },\n    { type: ScrollingVisibility, decorators: [{ type: Optional }] }\n];\n/**\n * Validates whether a vertical position property matches the expected values.\n * \\@docs-private\n * @param {?} property Name of the property being validated.\n * @param {?} value Value of the property being validated.\n * @return {?}\n */\nfunction validateVerticalPosition(property, value) {\n    if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"top\", \"bottom\" or \"center\".`);\n    }\n}\n/**\n * Validates whether a horizontal position property matches the expected values.\n * \\@docs-private\n * @param {?} property Name of the property being validated.\n * @param {?} value Value of the property being validated.\n * @return {?}\n */\nfunction validateHorizontalPosition(property, value) {\n    if (value !== 'start' && value !== 'end' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"start\", \"end\" or \"center\".`);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayKeyboardDispatcher {\n    /**\n     * @param {?} document\n     */\n    constructor(document) {\n        /**\n         * Currently attached overlays in the order they were attached.\n         */\n        this._attachedOverlays = [];\n        /**\n         * Keyboard event listener that will be attached to the body.\n         */\n        this._keydownListener = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            /** @type {?} */\n            const overlays = this._attachedOverlays;\n            for (let i = overlays.length - 1; i > -1; i--) {\n                // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n                // We want to target the most recent overlay, rather than trying to match where the event came\n                // from, because some components might open an overlay, but keep focus on a trigger element\n                // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n                // because we don't want overlays that don't handle keyboard events to block the ones below\n                // them that do.\n                if (overlays[i]._keydownEventSubscriptions > 0) {\n                    overlays[i]._keydownEvents.next(event);\n                    break;\n                }\n            }\n        });\n        this._document = document;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._detach();\n    }\n    /**\n     * Add a new overlay to the list of attached overlay refs.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    add(overlayRef) {\n        // Ensure that we don't get the same overlay multiple times.\n        this.remove(overlayRef);\n        // Lazily start dispatcher once first overlay is added\n        if (!this._isAttached) {\n            this._document.body.addEventListener('keydown', this._keydownListener);\n            this._isAttached = true;\n        }\n        this._attachedOverlays.push(overlayRef);\n    }\n    /**\n     * Remove an overlay from the list of attached overlay refs.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    remove(overlayRef) {\n        /** @type {?} */\n        const index = this._attachedOverlays.indexOf(overlayRef);\n        if (index > -1) {\n            this._attachedOverlays.splice(index, 1);\n        }\n        // Remove the global listener once there are no more overlays.\n        if (this._attachedOverlays.length === 0) {\n            this._detach();\n        }\n    }\n    /**\n     * Detaches the global keyboard event listener.\n     * @private\n     * @return {?}\n     */\n    _detach() {\n        if (this._isAttached) {\n            this._document.body.removeEventListener('keydown', this._keydownListener);\n            this._isAttached = false;\n        }\n    }\n}\nOverlayKeyboardDispatcher.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] },\n];\n/** @nocollapse */\nOverlayKeyboardDispatcher.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/** @nocollapse */ OverlayKeyboardDispatcher.ngInjectableDef = ɵɵdefineInjectable({ factory: function OverlayKeyboardDispatcher_Factory() { return new OverlayKeyboardDispatcher(ɵɵinject(DOCUMENT)); }, token: OverlayKeyboardDispatcher, providedIn: \"root\" });\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} dispatcher\n * @param {?} _document\n * @return {?}\n */\nfunction OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY(dispatcher, _document) {\n    return dispatcher || new OverlayKeyboardDispatcher(_document);\n}\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @type {?}\n */\nconst OVERLAY_KEYBOARD_DISPATCHER_PROVIDER = {\n    // If there is already an OverlayKeyboardDispatcher available, use that.\n    // Otherwise, provide a new one.\n    provide: OverlayKeyboardDispatcher,\n    deps: [\n        [new Optional(), new SkipSelf(), OverlayKeyboardDispatcher],\n        (/** @type {?} */ (\n        // Coerce to `InjectionToken` so that the `deps` match the \"shape\"\n        // of the type expected by Angular\n        DOCUMENT))\n    ],\n    useFactory: OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Container inside which all overlays will render.\n */\nclass OverlayContainer {\n    /**\n     * @param {?} document\n     */\n    constructor(document) {\n        this._document = document;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._containerElement && this._containerElement.parentNode) {\n            this._containerElement.parentNode.removeChild(this._containerElement);\n        }\n    }\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time  it is called to facilitate using\n     * the container in non-browser environments.\n     * @return {?} the container element\n     */\n    getContainerElement() {\n        if (!this._containerElement) {\n            this._createContainer();\n        }\n        return this._containerElement;\n    }\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     * @protected\n     * @return {?}\n     */\n    _createContainer() {\n        /** @type {?} */\n        const containerClass = 'cdk-overlay-container';\n        /** @type {?} */\n        const previousContainers = this._document.getElementsByClassName(containerClass);\n        // Remove any old containers. This can happen when transitioning from the server to the client.\n        for (let i = 0; i < previousContainers.length; i++) {\n            (/** @type {?} */ (previousContainers[i].parentNode)).removeChild(previousContainers[i]);\n        }\n        /** @type {?} */\n        const container = this._document.createElement('div');\n        container.classList.add(containerClass);\n        this._document.body.appendChild(container);\n        this._containerElement = container;\n    }\n}\nOverlayContainer.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] },\n];\n/** @nocollapse */\nOverlayContainer.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/** @nocollapse */ OverlayContainer.ngInjectableDef = ɵɵdefineInjectable({ factory: function OverlayContainer_Factory() { return new OverlayContainer(ɵɵinject(DOCUMENT)); }, token: OverlayContainer, providedIn: \"root\" });\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentContainer\n * @param {?} _document\n * @return {?}\n */\nfunction OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer, _document) {\n    return parentContainer || new OverlayContainer(_document);\n}\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @type {?}\n */\nconst OVERLAY_CONTAINER_PROVIDER = {\n    // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.\n    provide: OverlayContainer,\n    deps: [\n        [new Optional(), new SkipSelf(), OverlayContainer],\n        (/** @type {?} */ (DOCUMENT))\n    ],\n    useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nclass OverlayRef {\n    /**\n     * @param {?} _portalOutlet\n     * @param {?} _host\n     * @param {?} _pane\n     * @param {?} _config\n     * @param {?} _ngZone\n     * @param {?} _keyboardDispatcher\n     * @param {?} _document\n     * @param {?=} _location\n     */\n    constructor(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, _location) {\n        this._portalOutlet = _portalOutlet;\n        this._host = _host;\n        this._pane = _pane;\n        this._config = _config;\n        this._ngZone = _ngZone;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._document = _document;\n        this._location = _location;\n        this._backdropElement = null;\n        this._backdropClick = new Subject();\n        this._attachments = new Subject();\n        this._detachments = new Subject();\n        this._locationChanges = Subscription.EMPTY;\n        this._backdropClickHandler = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => this._backdropClick.next(event));\n        this._keydownEventsObservable = new Observable((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        (observer) => {\n            /** @type {?} */\n            const subscription = this._keydownEvents.subscribe(observer);\n            this._keydownEventSubscriptions++;\n            return (/**\n             * @return {?}\n             */\n            () => {\n                subscription.unsubscribe();\n                this._keydownEventSubscriptions--;\n            });\n        }));\n        /**\n         * Stream of keydown events dispatched to this overlay.\n         */\n        this._keydownEvents = new Subject();\n        /**\n         * Amount of subscriptions to the keydown events.\n         */\n        this._keydownEventSubscriptions = 0;\n        if (_config.scrollStrategy) {\n            this._scrollStrategy = _config.scrollStrategy;\n            this._scrollStrategy.attach(this);\n        }\n        this._positionStrategy = _config.positionStrategy;\n    }\n    /**\n     * The overlay's HTML element\n     * @return {?}\n     */\n    get overlayElement() {\n        return this._pane;\n    }\n    /**\n     * The overlay's backdrop HTML element.\n     * @return {?}\n     */\n    get backdropElement() {\n        return this._backdropElement;\n    }\n    /**\n     * Wrapper around the panel element. Can be used for advanced\n     * positioning where a wrapper with specific styling is\n     * required around the overlay pane.\n     * @return {?}\n     */\n    get hostElement() {\n        return this._host;\n    }\n    /**\n     * Attaches content, given via a Portal, to the overlay.\n     * If the overlay is configured to have a backdrop, it will be created.\n     *\n     * @param {?} portal Portal instance to which to attach the overlay.\n     * @return {?} The portal attachment result.\n     */\n    attach(portal) {\n        /** @type {?} */\n        let attachResult = this._portalOutlet.attach(portal);\n        if (this._positionStrategy) {\n            this._positionStrategy.attach(this);\n        }\n        // Update the pane element with the given configuration.\n        if (!this._host.parentElement && this._previousHostParent) {\n            this._previousHostParent.appendChild(this._host);\n        }\n        this._updateStackingOrder();\n        this._updateElementSize();\n        this._updateElementDirection();\n        if (this._scrollStrategy) {\n            this._scrollStrategy.enable();\n        }\n        // Update the position once the zone is stable so that the overlay will be fully rendered\n        // before attempting to position it, as the position may depend on the size of the rendered\n        // content.\n        this._ngZone.onStable\n            .asObservable()\n            .pipe(take(1))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            // The overlay could've been detached before the zone has stabilized.\n            if (this.hasAttached()) {\n                this.updatePosition();\n            }\n        }));\n        // Enable pointer events for the overlay pane element.\n        this._togglePointerEvents(true);\n        if (this._config.hasBackdrop) {\n            this._attachBackdrop();\n        }\n        if (this._config.panelClass) {\n            this._toggleClasses(this._pane, this._config.panelClass, true);\n        }\n        // Only emit the `attachments` event once all other setup is done.\n        this._attachments.next();\n        // Track this overlay by the keyboard dispatcher\n        this._keyboardDispatcher.add(this);\n        // @breaking-change 8.0.0 remove the null check for `_location`\n        // once the constructor parameter is made required.\n        if (this._config.disposeOnNavigation && this._location) {\n            this._locationChanges = this._location.subscribe((/**\n             * @return {?}\n             */\n            () => this.dispose()));\n        }\n        return attachResult;\n    }\n    /**\n     * Detaches an overlay from a portal.\n     * @return {?} The portal detachment result.\n     */\n    detach() {\n        if (!this.hasAttached()) {\n            return;\n        }\n        this.detachBackdrop();\n        // When the overlay is detached, the pane element should disable pointer events.\n        // This is necessary because otherwise the pane element will cover the page and disable\n        // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n        this._togglePointerEvents(false);\n        if (this._positionStrategy && this._positionStrategy.detach) {\n            this._positionStrategy.detach();\n        }\n        if (this._scrollStrategy) {\n            this._scrollStrategy.disable();\n        }\n        /** @type {?} */\n        const detachmentResult = this._portalOutlet.detach();\n        // Only emit after everything is detached.\n        this._detachments.next();\n        // Remove this overlay from keyboard dispatcher tracking.\n        this._keyboardDispatcher.remove(this);\n        // Keeping the host element in DOM the can cause scroll jank, because it still gets\n        // rendered, even though it's transparent and unclickable which is why we remove it.\n        this._detachContentWhenStable();\n        // Stop listening for location changes.\n        this._locationChanges.unsubscribe();\n        return detachmentResult;\n    }\n    /**\n     * Cleans up the overlay from the DOM.\n     * @return {?}\n     */\n    dispose() {\n        /** @type {?} */\n        const isAttached = this.hasAttached();\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._disposeScrollStrategy();\n        this.detachBackdrop();\n        this._locationChanges.unsubscribe();\n        this._keyboardDispatcher.remove(this);\n        this._portalOutlet.dispose();\n        this._attachments.complete();\n        this._backdropClick.complete();\n        this._keydownEvents.complete();\n        if (this._host && this._host.parentNode) {\n            this._host.parentNode.removeChild(this._host);\n            this._host = (/** @type {?} */ (null));\n        }\n        this._previousHostParent = this._pane = (/** @type {?} */ (null));\n        if (isAttached) {\n            this._detachments.next();\n        }\n        this._detachments.complete();\n    }\n    /**\n     * Whether the overlay has attached content.\n     * @return {?}\n     */\n    hasAttached() {\n        return this._portalOutlet.hasAttached();\n    }\n    /**\n     * Gets an observable that emits when the backdrop has been clicked.\n     * @return {?}\n     */\n    backdropClick() {\n        return this._backdropClick.asObservable();\n    }\n    /**\n     * Gets an observable that emits when the overlay has been attached.\n     * @return {?}\n     */\n    attachments() {\n        return this._attachments.asObservable();\n    }\n    /**\n     * Gets an observable that emits when the overlay has been detached.\n     * @return {?}\n     */\n    detachments() {\n        return this._detachments.asObservable();\n    }\n    /**\n     * Gets an observable of keydown events targeted to this overlay.\n     * @return {?}\n     */\n    keydownEvents() {\n        return this._keydownEventsObservable;\n    }\n    /**\n     * Gets the current overlay configuration, which is immutable.\n     * @return {?}\n     */\n    getConfig() {\n        return this._config;\n    }\n    /**\n     * Updates the position of the overlay based on the position strategy.\n     * @return {?}\n     */\n    updatePosition() {\n        if (this._positionStrategy) {\n            this._positionStrategy.apply();\n        }\n    }\n    /**\n     * Switches to a new position strategy and updates the overlay position.\n     * @param {?} strategy\n     * @return {?}\n     */\n    updatePositionStrategy(strategy) {\n        if (strategy === this._positionStrategy) {\n            return;\n        }\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._positionStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            this.updatePosition();\n        }\n    }\n    /**\n     * Update the size properties of the overlay.\n     * @param {?} sizeConfig\n     * @return {?}\n     */\n    updateSize(sizeConfig) {\n        this._config = Object.assign({}, this._config, sizeConfig);\n        this._updateElementSize();\n    }\n    /**\n     * Sets the LTR/RTL direction for the overlay.\n     * @param {?} dir\n     * @return {?}\n     */\n    setDirection(dir) {\n        this._config = Object.assign({}, this._config, { direction: dir });\n        this._updateElementDirection();\n    }\n    /**\n     * Add a CSS class or an array of classes to the overlay pane.\n     * @param {?} classes\n     * @return {?}\n     */\n    addPanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, true);\n        }\n    }\n    /**\n     * Remove a CSS class or an array of classes from the overlay pane.\n     * @param {?} classes\n     * @return {?}\n     */\n    removePanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, false);\n        }\n    }\n    /**\n     * Returns the layout direction of the overlay panel.\n     * @return {?}\n     */\n    getDirection() {\n        /** @type {?} */\n        const direction = this._config.direction;\n        if (!direction) {\n            return 'ltr';\n        }\n        return typeof direction === 'string' ? direction : direction.value;\n    }\n    /**\n     * Switches to a new scroll strategy.\n     * @param {?} strategy\n     * @return {?}\n     */\n    updateScrollStrategy(strategy) {\n        if (strategy === this._scrollStrategy) {\n            return;\n        }\n        this._disposeScrollStrategy();\n        this._scrollStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            strategy.enable();\n        }\n    }\n    /**\n     * Updates the text direction of the overlay panel.\n     * @private\n     * @return {?}\n     */\n    _updateElementDirection() {\n        this._host.setAttribute('dir', this.getDirection());\n    }\n    /**\n     * Updates the size of the overlay element based on the overlay config.\n     * @private\n     * @return {?}\n     */\n    _updateElementSize() {\n        if (!this._pane) {\n            return;\n        }\n        /** @type {?} */\n        const style = this._pane.style;\n        style.width = coerceCssPixelValue(this._config.width);\n        style.height = coerceCssPixelValue(this._config.height);\n        style.minWidth = coerceCssPixelValue(this._config.minWidth);\n        style.minHeight = coerceCssPixelValue(this._config.minHeight);\n        style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n        style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n    }\n    /**\n     * Toggles the pointer events for the overlay pane element.\n     * @private\n     * @param {?} enablePointer\n     * @return {?}\n     */\n    _togglePointerEvents(enablePointer) {\n        this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';\n    }\n    /**\n     * Attaches a backdrop for this overlay.\n     * @private\n     * @return {?}\n     */\n    _attachBackdrop() {\n        /** @type {?} */\n        const showingClass = 'cdk-overlay-backdrop-showing';\n        this._backdropElement = this._document.createElement('div');\n        this._backdropElement.classList.add('cdk-overlay-backdrop');\n        if (this._config.backdropClass) {\n            this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n        }\n        // Insert the backdrop before the pane in the DOM order,\n        // in order to handle stacked overlays properly.\n        (/** @type {?} */ (this._host.parentElement)).insertBefore(this._backdropElement, this._host);\n        // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n        // action desired when such a click occurs (usually closing the overlay).\n        this._backdropElement.addEventListener('click', this._backdropClickHandler);\n        // Add class to fade-in the backdrop after one frame.\n        if (typeof requestAnimationFrame !== 'undefined') {\n            this._ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                requestAnimationFrame((/**\n                 * @return {?}\n                 */\n                () => {\n                    if (this._backdropElement) {\n                        this._backdropElement.classList.add(showingClass);\n                    }\n                }));\n            }));\n        }\n        else {\n            this._backdropElement.classList.add(showingClass);\n        }\n    }\n    /**\n     * Updates the stacking order of the element, moving it to the top if necessary.\n     * This is required in cases where one overlay was detached, while another one,\n     * that should be behind it, was destroyed. The next time both of them are opened,\n     * the stacking will be wrong, because the detached element's pane will still be\n     * in its original DOM position.\n     * @private\n     * @return {?}\n     */\n    _updateStackingOrder() {\n        if (this._host.nextSibling) {\n            (/** @type {?} */ (this._host.parentNode)).appendChild(this._host);\n        }\n    }\n    /**\n     * Detaches the backdrop (if any) associated with the overlay.\n     * @return {?}\n     */\n    detachBackdrop() {\n        /** @type {?} */\n        let backdropToDetach = this._backdropElement;\n        if (!backdropToDetach) {\n            return;\n        }\n        /** @type {?} */\n        let timeoutId;\n        /** @type {?} */\n        let finishDetach = (/**\n         * @return {?}\n         */\n        () => {\n            // It may not be attached to anything in certain cases (e.g. unit tests).\n            if (backdropToDetach) {\n                backdropToDetach.removeEventListener('click', this._backdropClickHandler);\n                backdropToDetach.removeEventListener('transitionend', finishDetach);\n                if (backdropToDetach.parentNode) {\n                    backdropToDetach.parentNode.removeChild(backdropToDetach);\n                }\n            }\n            // It is possible that a new portal has been attached to this overlay since we started\n            // removing the backdrop. If that is the case, only clear the backdrop reference if it\n            // is still the same instance that we started to remove.\n            if (this._backdropElement == backdropToDetach) {\n                this._backdropElement = null;\n            }\n            if (this._config.backdropClass) {\n                this._toggleClasses((/** @type {?} */ (backdropToDetach)), this._config.backdropClass, false);\n            }\n            clearTimeout(timeoutId);\n        });\n        backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n        this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            (/** @type {?} */ (backdropToDetach)).addEventListener('transitionend', finishDetach);\n        }));\n        // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n        // In this case we make it unclickable and we try to remove it after a delay.\n        backdropToDetach.style.pointerEvents = 'none';\n        // Run this outside the Angular zone because there's nothing that Angular cares about.\n        // If it were to run inside the Angular zone, every test that used Overlay would have to be\n        // either async or fakeAsync.\n        timeoutId = this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => setTimeout(finishDetach, 500)));\n    }\n    /**\n     * Toggles a single CSS class or an array of classes on an element.\n     * @private\n     * @param {?} element\n     * @param {?} cssClasses\n     * @param {?} isAdd\n     * @return {?}\n     */\n    _toggleClasses(element, cssClasses, isAdd) {\n        /** @type {?} */\n        const classList = element.classList;\n        coerceArray(cssClasses).forEach((/**\n         * @param {?} cssClass\n         * @return {?}\n         */\n        cssClass => {\n            // We can't do a spread here, because IE doesn't support setting multiple classes.\n            // Also trying to add an empty string to a DOMTokenList will throw.\n            if (cssClass) {\n                isAdd ? classList.add(cssClass) : classList.remove(cssClass);\n            }\n        }));\n    }\n    /**\n     * Detaches the overlay content next time the zone stabilizes.\n     * @private\n     * @return {?}\n     */\n    _detachContentWhenStable() {\n        // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n        // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n        // be patched to run inside the zone, which will throw us into an infinite loop.\n        this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            // We can't remove the host here immediately, because the overlay pane's content\n            // might still be animating. This stream helps us avoid interrupting the animation\n            // by waiting for the pane to become empty.\n            /** @type {?} */\n            const subscription = this._ngZone.onStable\n                .asObservable()\n                .pipe(takeUntil(merge(this._attachments, this._detachments)))\n                .subscribe((/**\n             * @return {?}\n             */\n            () => {\n                // Needs a couple of checks for the pane and host, because\n                // they may have been removed by the time the zone stabilizes.\n                if (!this._pane || !this._host || this._pane.children.length === 0) {\n                    if (this._pane && this._config.panelClass) {\n                        this._toggleClasses(this._pane, this._config.panelClass, false);\n                    }\n                    if (this._host && this._host.parentElement) {\n                        this._previousHostParent = this._host.parentElement;\n                        this._previousHostParent.removeChild(this._host);\n                    }\n                    subscription.unsubscribe();\n                }\n            }));\n        }));\n    }\n    /**\n     * Disposes of a scroll strategy.\n     * @private\n     * @return {?}\n     */\n    _disposeScrollStrategy() {\n        /** @type {?} */\n        const scrollStrategy = this._scrollStrategy;\n        if (scrollStrategy) {\n            scrollStrategy.disable();\n            if (scrollStrategy.detach) {\n                scrollStrategy.detach();\n            }\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n/**\n * Class to be added to the overlay bounding box.\n * @type {?}\n */\nconst boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nclass FlexibleConnectedPositionStrategy {\n    /**\n     * @param {?} connectedTo\n     * @param {?} _viewportRuler\n     * @param {?} _document\n     * @param {?} _platform\n     * @param {?} _overlayContainer\n     */\n    constructor(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n        /**\n         * Last size used for the bounding box. Used to avoid resizing the overlay after open.\n         */\n        this._lastBoundingBoxSize = { width: 0, height: 0 };\n        /**\n         * Whether the overlay was pushed in a previous positioning.\n         */\n        this._isPushed = false;\n        /**\n         * Whether the overlay can be pushed on-screen on the initial open.\n         */\n        this._canPush = true;\n        /**\n         * Whether the overlay can grow via flexible width/height after the initial open.\n         */\n        this._growAfterOpen = false;\n        /**\n         * Whether the overlay's width and height can be constrained to fit within the viewport.\n         */\n        this._hasFlexibleDimensions = true;\n        /**\n         * Whether the overlay position is locked.\n         */\n        this._positionLocked = false;\n        /**\n         * Amount of space that must be maintained between the overlay and the edge of the viewport.\n         */\n        this._viewportMargin = 0;\n        /**\n         * The Scrollable containers used to check scrollable view properties on position change.\n         */\n        this._scrollables = [];\n        /**\n         * Ordered list of preferred positions, from most to least desirable.\n         */\n        this._preferredPositions = [];\n        /**\n         * Subject that emits whenever the position changes.\n         */\n        this._positionChanges = new Subject();\n        /**\n         * Subscription to viewport size changes.\n         */\n        this._resizeSubscription = Subscription.EMPTY;\n        /**\n         * Default offset for the overlay along the x axis.\n         */\n        this._offsetX = 0;\n        /**\n         * Default offset for the overlay along the y axis.\n         */\n        this._offsetY = 0;\n        /**\n         * Keeps track of the CSS classes that the position strategy has applied on the overlay panel.\n         */\n        this._appliedPanelClasses = [];\n        /**\n         * Observable sequence of position changes.\n         */\n        this.positionChanges = this._positionChanges.asObservable();\n        this.setOrigin(connectedTo);\n    }\n    /**\n     * Ordered list of preferred positions, from most to least desirable.\n     * @return {?}\n     */\n    get positions() {\n        return this._preferredPositions;\n    }\n    /**\n     * Attaches this position strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    attach(overlayRef) {\n        if (this._overlayRef && overlayRef !== this._overlayRef) {\n            throw Error('This position strategy is already attached to an overlay');\n        }\n        this._validatePositions();\n        overlayRef.hostElement.classList.add(boundingBoxClass);\n        this._overlayRef = overlayRef;\n        this._boundingBox = overlayRef.hostElement;\n        this._pane = overlayRef.overlayElement;\n        this._isDisposed = false;\n        this._isInitialRender = true;\n        this._lastPosition = null;\n        this._resizeSubscription.unsubscribe();\n        this._resizeSubscription = this._viewportRuler.change().subscribe((/**\n         * @return {?}\n         */\n        () => {\n            // When the window is resized, we want to trigger the next reposition as if it\n            // was an initial render, in order for the strategy to pick a new optimal position,\n            // otherwise position locking will cause it to stay at the old one.\n            this._isInitialRender = true;\n            this.apply();\n        }));\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin best fits on-screen.\n     *\n     * The selection of a position goes as follows:\n     *  - If any positions fit completely within the viewport as-is,\n     *      choose the first position that does so.\n     *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n     *      choose the position with the greatest available size modified by the positions' weight.\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\n     *      on-screen.\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n     * \\@docs-private\n     * @return {?}\n     */\n    apply() {\n        // We shouldn't do anything if the strategy was disposed or we're on the server.\n        if (this._isDisposed || !this._platform.isBrowser) {\n            return;\n        }\n        // If the position has been applied already (e.g. when the overlay was opened) and the\n        // consumer opted into locking in the position, re-use the old position, in order to\n        // prevent the overlay from jumping around.\n        if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n            this.reapplyLastPosition();\n            return;\n        }\n        this._clearPanelClasses();\n        this._resetOverlayElementStyles();\n        this._resetBoundingBoxStyles();\n        // We need the bounding rects for the origin and the overlay to determine how to position\n        // the overlay relative to the origin.\n        // We use the viewport rect to determine whether a position would go off-screen.\n        this._viewportRect = this._getNarrowedViewportRect();\n        this._originRect = this._getOriginRect();\n        this._overlayRect = this._pane.getBoundingClientRect();\n        /** @type {?} */\n        const originRect = this._originRect;\n        /** @type {?} */\n        const overlayRect = this._overlayRect;\n        /** @type {?} */\n        const viewportRect = this._viewportRect;\n        // Positions where the overlay will fit with flexible dimensions.\n        /** @type {?} */\n        const flexibleFits = [];\n        // Fallback if none of the preferred positions fit within the viewport.\n        /** @type {?} */\n        let fallback;\n        // Go through each of the preferred positions looking for a good fit.\n        // If a good fit is found, it will be applied immediately.\n        for (let pos of this._preferredPositions) {\n            // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n            /** @type {?} */\n            let originPoint = this._getOriginPoint(originRect, pos);\n            // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n            // overlay in this position. We use the top-left corner for calculations and later translate\n            // this into an appropriate (top, left, bottom, right) style.\n            /** @type {?} */\n            let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n            // Calculate how well the overlay would fit into the viewport with this point.\n            /** @type {?} */\n            let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n            // If the overlay, without any further work, fits into the viewport, use this position.\n            if (overlayFit.isCompletelyWithinViewport) {\n                this._isPushed = false;\n                this._applyPosition(pos, originPoint);\n                return;\n            }\n            // If the overlay has flexible dimensions, we can use this position\n            // so long as there's enough space for the minimum dimensions.\n            if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n                // Save positions where the overlay will fit with flexible dimensions. We will use these\n                // if none of the positions fit *without* flexible dimensions.\n                flexibleFits.push({\n                    position: pos,\n                    origin: originPoint,\n                    overlayRect,\n                    boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)\n                });\n                continue;\n            }\n            // If the current preferred position does not fit on the screen, remember the position\n            // if it has more visible area on-screen than we've seen and move onto the next preferred\n            // position.\n            if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n                fallback = { overlayFit, overlayPoint, originPoint, position: pos, overlayRect };\n            }\n        }\n        // If there are any positions where the overlay would fit with flexible dimensions, choose the\n        // one that has the greatest area available modified by the position's weight\n        if (flexibleFits.length) {\n            /** @type {?} */\n            let bestFit = null;\n            /** @type {?} */\n            let bestScore = -1;\n            for (const fit of flexibleFits) {\n                /** @type {?} */\n                const score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n                if (score > bestScore) {\n                    bestScore = score;\n                    bestFit = fit;\n                }\n            }\n            this._isPushed = false;\n            this._applyPosition((/** @type {?} */ (bestFit)).position, (/** @type {?} */ (bestFit)).origin);\n            return;\n        }\n        // When none of the preferred positions fit within the viewport, take the position\n        // that went off-screen the least and attempt to push it on-screen.\n        if (this._canPush) {\n            // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n            this._isPushed = true;\n            this._applyPosition((/** @type {?} */ (fallback)).position, (/** @type {?} */ (fallback)).originPoint);\n            return;\n        }\n        // All options for getting the overlay within the viewport have been exhausted, so go with the\n        // position that went off-screen the least.\n        this._applyPosition((/** @type {?} */ (fallback)).position, (/** @type {?} */ (fallback)).originPoint);\n    }\n    /**\n     * @return {?}\n     */\n    detach() {\n        this._clearPanelClasses();\n        this._lastPosition = null;\n        this._previousPushAmount = null;\n        this._resizeSubscription.unsubscribe();\n    }\n    /**\n     * Cleanup after the element gets destroyed.\n     * @return {?}\n     */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        // We can't use `_resetBoundingBoxStyles` here, because it resets\n        // some properties to zero, rather than removing them.\n        if (this._boundingBox) {\n            extendStyles(this._boundingBox.style, (/** @type {?} */ ({\n                top: '',\n                left: '',\n                right: '',\n                bottom: '',\n                height: '',\n                width: '',\n                alignItems: '',\n                justifyContent: '',\n            })));\n        }\n        if (this._pane) {\n            this._resetOverlayElementStyles();\n        }\n        if (this._overlayRef) {\n            this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n        }\n        this.detach();\n        this._positionChanges.complete();\n        this._overlayRef = this._boundingBox = (/** @type {?} */ (null));\n        this._isDisposed = true;\n    }\n    /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     * @return {?}\n     */\n    reapplyLastPosition() {\n        if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {\n            this._originRect = this._getOriginRect();\n            this._overlayRect = this._pane.getBoundingClientRect();\n            this._viewportRect = this._getNarrowedViewportRect();\n            /** @type {?} */\n            const lastPosition = this._lastPosition || this._preferredPositions[0];\n            /** @type {?} */\n            const originPoint = this._getOriginPoint(this._originRect, lastPosition);\n            this._applyPosition(lastPosition, originPoint);\n        }\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} scrollables\n     * @return {THIS}\n     */\n    withScrollableContainers(scrollables) {\n        (/** @type {?} */ (this))._scrollables = scrollables;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Adds new preferred positions.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} positions List of positions options for this overlay.\n     * @return {THIS}\n     */\n    withPositions(positions) {\n        (/** @type {?} */ (this))._preferredPositions = positions;\n        // If the last calculated position object isn't part of the positions anymore, clear\n        // it in order to avoid it being picked up if the consumer tries to re-apply.\n        if (positions.indexOf((/** @type {?} */ ((/** @type {?} */ (this))._lastPosition))) === -1) {\n            (/** @type {?} */ (this))._lastPosition = null;\n        }\n        (/** @type {?} */ (this))._validatePositions();\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} margin Required margin between the overlay and the viewport edge in pixels.\n     * @return {THIS}\n     */\n    withViewportMargin(margin) {\n        (/** @type {?} */ (this))._viewportMargin = margin;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets whether the overlay's width and height can be constrained to fit within the viewport.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} flexibleDimensions\n     * @return {THIS}\n     */\n    withFlexibleDimensions(flexibleDimensions = true) {\n        (/** @type {?} */ (this))._hasFlexibleDimensions = flexibleDimensions;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets whether the overlay can grow after the initial open via flexible width/height.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} growAfterOpen\n     * @return {THIS}\n     */\n    withGrowAfterOpen(growAfterOpen = true) {\n        (/** @type {?} */ (this))._growAfterOpen = growAfterOpen;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets whether the overlay can be pushed on-screen if none of the provided positions fit.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} canPush\n     * @return {THIS}\n     */\n    withPush(canPush = true) {\n        (/** @type {?} */ (this))._canPush = canPush;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} isLocked Whether the overlay should locked in.\n     * @return {THIS}\n     */\n    withLockedPosition(isLocked = true) {\n        (/** @type {?} */ (this))._positionLocked = isLocked;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the origin, relative to which to position the overlay.\n     * Using an element origin is useful for building components that need to be positioned\n     * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\n     * used for cases like contextual menus which open relative to the user's pointer.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} origin Reference to the new origin.\n     * @return {THIS}\n     */\n    setOrigin(origin) {\n        (/** @type {?} */ (this))._origin = origin;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the x-axis.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} offset New offset in the X axis.\n     * @return {THIS}\n     */\n    withDefaultOffsetX(offset) {\n        (/** @type {?} */ (this))._offsetX = offset;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the y-axis.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} offset New offset in the Y axis.\n     * @return {THIS}\n     */\n    withDefaultOffsetY(offset) {\n        (/** @type {?} */ (this))._offsetY = offset;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Configures that the position strategy should set a `transform-origin` on some elements\n     * inside the overlay, depending on the current position that is being applied. This is\n     * useful for the cases where the origin of an animation can change depending on the\n     * alignment of the overlay.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} selector CSS selector that will be used to find the target\n     *    elements onto which to set the transform origin.\n     * @return {THIS}\n     */\n    withTransformOriginOn(selector) {\n        (/** @type {?} */ (this))._transformOriginSelector = selector;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n     * @private\n     * @param {?} originRect\n     * @param {?} pos\n     * @return {?}\n     */\n    _getOriginPoint(originRect, pos) {\n        /** @type {?} */\n        let x;\n        if (pos.originX == 'center') {\n            // Note: when centering we should always use the `left`\n            // offset, otherwise the position will be wrong in RTL.\n            x = originRect.left + (originRect.width / 2);\n        }\n        else {\n            /** @type {?} */\n            const startX = this._isRtl() ? originRect.right : originRect.left;\n            /** @type {?} */\n            const endX = this._isRtl() ? originRect.left : originRect.right;\n            x = pos.originX == 'start' ? startX : endX;\n        }\n        /** @type {?} */\n        let y;\n        if (pos.originY == 'center') {\n            y = originRect.top + (originRect.height / 2);\n        }\n        else {\n            y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n        }\n        return { x, y };\n    }\n    /**\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n     * origin point to which the overlay should be connected.\n     * @private\n     * @param {?} originPoint\n     * @param {?} overlayRect\n     * @param {?} pos\n     * @return {?}\n     */\n    _getOverlayPoint(originPoint, overlayRect, pos) {\n        // Calculate the (overlayStartX, overlayStartY), the start of the\n        // potential overlay position relative to the origin point.\n        /** @type {?} */\n        let overlayStartX;\n        if (pos.overlayX == 'center') {\n            overlayStartX = -overlayRect.width / 2;\n        }\n        else if (pos.overlayX === 'start') {\n            overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n        }\n        else {\n            overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n        }\n        /** @type {?} */\n        let overlayStartY;\n        if (pos.overlayY == 'center') {\n            overlayStartY = -overlayRect.height / 2;\n        }\n        else {\n            overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n        }\n        // The (x, y) coordinates of the overlay.\n        return {\n            x: originPoint.x + overlayStartX,\n            y: originPoint.y + overlayStartY,\n        };\n    }\n    /**\n     * Gets how well an overlay at the given point will fit within the viewport.\n     * @private\n     * @param {?} point\n     * @param {?} overlay\n     * @param {?} viewport\n     * @param {?} position\n     * @return {?}\n     */\n    _getOverlayFit(point, overlay, viewport, position) {\n        let { x, y } = point;\n        /** @type {?} */\n        let offsetX = this._getOffset(position, 'x');\n        /** @type {?} */\n        let offsetY = this._getOffset(position, 'y');\n        // Account for the offsets since they could push the overlay out of the viewport.\n        if (offsetX) {\n            x += offsetX;\n        }\n        if (offsetY) {\n            y += offsetY;\n        }\n        // How much the overlay would overflow at this position, on each side.\n        /** @type {?} */\n        let leftOverflow = 0 - x;\n        /** @type {?} */\n        let rightOverflow = (x + overlay.width) - viewport.width;\n        /** @type {?} */\n        let topOverflow = 0 - y;\n        /** @type {?} */\n        let bottomOverflow = (y + overlay.height) - viewport.height;\n        // Visible parts of the element on each axis.\n        /** @type {?} */\n        let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n        /** @type {?} */\n        let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n        /** @type {?} */\n        let visibleArea = visibleWidth * visibleHeight;\n        return {\n            visibleArea,\n            isCompletelyWithinViewport: (overlay.width * overlay.height) === visibleArea,\n            fitsInViewportVertically: visibleHeight === overlay.height,\n            fitsInViewportHorizontally: visibleWidth == overlay.width,\n        };\n    }\n    /**\n     * Whether the overlay can fit within the viewport when it may resize either its width or height.\n     * @private\n     * @param {?} fit How well the overlay fits in the viewport at some position.\n     * @param {?} point The (x, y) coordinates of the overlat at some position.\n     * @param {?} viewport The geometry of the viewport.\n     * @return {?}\n     */\n    _canFitWithFlexibleDimensions(fit, point, viewport) {\n        if (this._hasFlexibleDimensions) {\n            /** @type {?} */\n            const availableHeight = viewport.bottom - point.y;\n            /** @type {?} */\n            const availableWidth = viewport.right - point.x;\n            /** @type {?} */\n            const minHeight = this._overlayRef.getConfig().minHeight;\n            /** @type {?} */\n            const minWidth = this._overlayRef.getConfig().minWidth;\n            /** @type {?} */\n            const verticalFit = fit.fitsInViewportVertically ||\n                (minHeight != null && minHeight <= availableHeight);\n            /** @type {?} */\n            const horizontalFit = fit.fitsInViewportHorizontally ||\n                (minWidth != null && minWidth <= availableWidth);\n            return verticalFit && horizontalFit;\n        }\n        return false;\n    }\n    /**\n     * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n     * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n     * right and bottom).\n     *\n     * @private\n     * @param {?} start Starting point from which the overlay is pushed.\n     * @param {?} overlay Dimensions of the overlay.\n     * @param {?} scrollPosition Current viewport scroll position.\n     * @return {?} The point at which to position the overlay after pushing. This is effectively a new\n     *     originPoint.\n     */\n    _pushOverlayOnScreen(start, overlay, scrollPosition) {\n        // If the position is locked and we've pushed the overlay already, reuse the previous push\n        // amount, rather than pushing it again. If we were to continue pushing, the element would\n        // remain in the viewport, which goes against the expectations when position locking is enabled.\n        if (this._previousPushAmount && this._positionLocked) {\n            return {\n                x: start.x + this._previousPushAmount.x,\n                y: start.y + this._previousPushAmount.y\n            };\n        }\n        /** @type {?} */\n        const viewport = this._viewportRect;\n        // Determine how much the overlay goes outside the viewport on each\n        // side, which we'll use to decide which direction to push it.\n        /** @type {?} */\n        const overflowRight = Math.max(start.x + overlay.width - viewport.right, 0);\n        /** @type {?} */\n        const overflowBottom = Math.max(start.y + overlay.height - viewport.bottom, 0);\n        /** @type {?} */\n        const overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n        /** @type {?} */\n        const overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\n        // Amount by which to push the overlay in each axis such that it remains on-screen.\n        /** @type {?} */\n        let pushX = 0;\n        /** @type {?} */\n        let pushY = 0;\n        // If the overlay fits completely within the bounds of the viewport, push it from whichever\n        // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n        // viewport and allow for the trailing end of the overlay to go out of bounds.\n        if (overlay.width <= viewport.width) {\n            pushX = overflowLeft || -overflowRight;\n        }\n        else {\n            pushX = start.x < this._viewportMargin ? (viewport.left - scrollPosition.left) - start.x : 0;\n        }\n        if (overlay.height <= viewport.height) {\n            pushY = overflowTop || -overflowBottom;\n        }\n        else {\n            pushY = start.y < this._viewportMargin ? (viewport.top - scrollPosition.top) - start.y : 0;\n        }\n        this._previousPushAmount = { x: pushX, y: pushY };\n        return {\n            x: start.x + pushX,\n            y: start.y + pushY,\n        };\n    }\n    /**\n     * Applies a computed position to the overlay and emits a position change.\n     * @private\n     * @param {?} position The position preference\n     * @param {?} originPoint The point on the origin element where the overlay is connected.\n     * @return {?}\n     */\n    _applyPosition(position, originPoint) {\n        this._setTransformOrigin(position);\n        this._setOverlayElementStyles(originPoint, position);\n        this._setBoundingBoxStyles(originPoint, position);\n        if (position.panelClass) {\n            this._addPanelClasses(position.panelClass);\n        }\n        // Save the last connected position in case the position needs to be re-calculated.\n        this._lastPosition = position;\n        // Notify that the position has been changed along with its change properties.\n        // We only emit if we've got any subscriptions, because the scroll visibility\n        // calculcations can be somewhat expensive.\n        if (this._positionChanges.observers.length) {\n            /** @type {?} */\n            const scrollableViewProperties = this._getScrollVisibility();\n            /** @type {?} */\n            const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n            this._positionChanges.next(changeEvent);\n        }\n        this._isInitialRender = false;\n    }\n    /**\n     * Sets the transform origin based on the configured selector and the passed-in position.\n     * @private\n     * @param {?} position\n     * @return {?}\n     */\n    _setTransformOrigin(position) {\n        if (!this._transformOriginSelector) {\n            return;\n        }\n        /** @type {?} */\n        const elements = (/** @type {?} */ (this._boundingBox)).querySelectorAll(this._transformOriginSelector);\n        /** @type {?} */\n        let xOrigin;\n        /** @type {?} */\n        let yOrigin = position.overlayY;\n        if (position.overlayX === 'center') {\n            xOrigin = 'center';\n        }\n        else if (this._isRtl()) {\n            xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n        }\n        else {\n            xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n        }\n        for (let i = 0; i < elements.length; i++) {\n            elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n        }\n    }\n    /**\n     * Gets the position and size of the overlay's sizing container.\n     *\n     * This method does no measuring and applies no styles so that we can cheaply compute the\n     * bounds for all positions and choose the best fit based on these results.\n     * @private\n     * @param {?} origin\n     * @param {?} position\n     * @return {?}\n     */\n    _calculateBoundingBoxRect(origin, position) {\n        /** @type {?} */\n        const viewport = this._viewportRect;\n        /** @type {?} */\n        const isRtl = this._isRtl();\n        /** @type {?} */\n        let height;\n        /** @type {?} */\n        let top;\n        /** @type {?} */\n        let bottom;\n        if (position.overlayY === 'top') {\n            // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n            top = origin.y;\n            height = viewport.height - top + this._viewportMargin;\n        }\n        else if (position.overlayY === 'bottom') {\n            // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n            // the viewport margin back in, because the viewport rect is narrowed down to remove the\n            // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n            bottom = viewport.height - origin.y + this._viewportMargin * 2;\n            height = viewport.height - bottom + this._viewportMargin;\n        }\n        else {\n            // If neither top nor bottom, it means that the overlay is vertically centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n            // `origin.y - viewport.top`.\n            /** @type {?} */\n            const smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n            /** @type {?} */\n            const previousHeight = this._lastBoundingBoxSize.height;\n            height = smallestDistanceToViewportEdge * 2;\n            top = origin.y - smallestDistanceToViewportEdge;\n            if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n                top = origin.y - (previousHeight / 2);\n            }\n        }\n        // The overlay is opening 'right-ward' (the content flows to the right).\n        /** @type {?} */\n        const isBoundedByRightViewportEdge = (position.overlayX === 'start' && !isRtl) ||\n            (position.overlayX === 'end' && isRtl);\n        // The overlay is opening 'left-ward' (the content flows to the left).\n        /** @type {?} */\n        const isBoundedByLeftViewportEdge = (position.overlayX === 'end' && !isRtl) ||\n            (position.overlayX === 'start' && isRtl);\n        /** @type {?} */\n        let width;\n        /** @type {?} */\n        let left;\n        /** @type {?} */\n        let right;\n        if (isBoundedByLeftViewportEdge) {\n            right = viewport.width - origin.x + this._viewportMargin;\n            width = origin.x - this._viewportMargin;\n        }\n        else if (isBoundedByRightViewportEdge) {\n            left = origin.x;\n            width = viewport.right - origin.x;\n        }\n        else {\n            // If neither start nor end, it means that the overlay is horizontally centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.right - origin.x` and\n            // `origin.x - viewport.left`.\n            /** @type {?} */\n            const smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);\n            /** @type {?} */\n            const previousWidth = this._lastBoundingBoxSize.width;\n            width = smallestDistanceToViewportEdge * 2;\n            left = origin.x - smallestDistanceToViewportEdge;\n            if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n                left = origin.x - (previousWidth / 2);\n            }\n        }\n        return { top: (/** @type {?} */ (top)), left: (/** @type {?} */ (left)), bottom: (/** @type {?} */ (bottom)), right: (/** @type {?} */ (right)), width, height };\n    }\n    /**\n     * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n     * origin's connection point and stetches to the bounds of the viewport.\n     *\n     * @private\n     * @param {?} origin The point on the origin element where the overlay is connected.\n     * @param {?} position The position preference\n     * @return {?}\n     */\n    _setBoundingBoxStyles(origin, position) {\n        /** @type {?} */\n        const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n        // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n        // when applying a new size.\n        if (!this._isInitialRender && !this._growAfterOpen) {\n            boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n            boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n        }\n        /** @type {?} */\n        const styles = (/** @type {?} */ ({}));\n        if (this._hasExactPosition()) {\n            styles.top = styles.left = '0';\n            styles.bottom = styles.right = '';\n            styles.width = styles.height = '100%';\n        }\n        else {\n            /** @type {?} */\n            const maxHeight = this._overlayRef.getConfig().maxHeight;\n            /** @type {?} */\n            const maxWidth = this._overlayRef.getConfig().maxWidth;\n            styles.height = coerceCssPixelValue(boundingBoxRect.height);\n            styles.top = coerceCssPixelValue(boundingBoxRect.top);\n            styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n            styles.width = coerceCssPixelValue(boundingBoxRect.width);\n            styles.left = coerceCssPixelValue(boundingBoxRect.left);\n            styles.right = coerceCssPixelValue(boundingBoxRect.right);\n            // Push the pane content towards the proper direction.\n            if (position.overlayX === 'center') {\n                styles.alignItems = 'center';\n            }\n            else {\n                styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n            }\n            if (position.overlayY === 'center') {\n                styles.justifyContent = 'center';\n            }\n            else {\n                styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n            }\n            if (maxHeight) {\n                styles.maxHeight = coerceCssPixelValue(maxHeight);\n            }\n            if (maxWidth) {\n                styles.maxWidth = coerceCssPixelValue(maxWidth);\n            }\n        }\n        this._lastBoundingBoxSize = boundingBoxRect;\n        extendStyles((/** @type {?} */ (this._boundingBox)).style, styles);\n    }\n    /**\n     * Resets the styles for the bounding box so that a new positioning can be computed.\n     * @private\n     * @return {?}\n     */\n    _resetBoundingBoxStyles() {\n        extendStyles((/** @type {?} */ (this._boundingBox)).style, (/** @type {?} */ ({\n            top: '0',\n            left: '0',\n            right: '0',\n            bottom: '0',\n            height: '',\n            width: '',\n            alignItems: '',\n            justifyContent: '',\n        })));\n    }\n    /**\n     * Resets the styles for the overlay pane so that a new positioning can be computed.\n     * @private\n     * @return {?}\n     */\n    _resetOverlayElementStyles() {\n        extendStyles(this._pane.style, (/** @type {?} */ ({\n            top: '',\n            left: '',\n            bottom: '',\n            right: '',\n            position: '',\n            transform: '',\n        })));\n    }\n    /**\n     * Sets positioning styles to the overlay element.\n     * @private\n     * @param {?} originPoint\n     * @param {?} position\n     * @return {?}\n     */\n    _setOverlayElementStyles(originPoint, position) {\n        /** @type {?} */\n        const styles = (/** @type {?} */ ({}));\n        if (this._hasExactPosition()) {\n            /** @type {?} */\n            const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n            extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n            extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n        }\n        else {\n            styles.position = 'static';\n        }\n        // Use a transform to apply the offsets. We do this because the `center` positions rely on\n        // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n        // off the position. We also can't use margins, because they won't have an effect in some\n        // cases where the element doesn't have anything to \"push off of\". Finally, this works\n        // better both with flexible and non-flexible positioning.\n        /** @type {?} */\n        let transformString = '';\n        /** @type {?} */\n        let offsetX = this._getOffset(position, 'x');\n        /** @type {?} */\n        let offsetY = this._getOffset(position, 'y');\n        if (offsetX) {\n            transformString += `translateX(${offsetX}px) `;\n        }\n        if (offsetY) {\n            transformString += `translateY(${offsetY}px)`;\n        }\n        styles.transform = transformString.trim();\n        // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n        // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n        // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n        if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxHeight) {\n            styles.maxHeight = '';\n        }\n        if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxWidth) {\n            styles.maxWidth = '';\n        }\n        extendStyles(this._pane.style, styles);\n    }\n    /**\n     * Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing.\n     * @private\n     * @param {?} position\n     * @param {?} originPoint\n     * @param {?} scrollPosition\n     * @return {?}\n     */\n    _getExactOverlayY(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the\n        // preferred position has changed since the last `apply`.\n        /** @type {?} */\n        let styles = (/** @type {?} */ ({ top: null, bottom: null }));\n        /** @type {?} */\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        /** @type {?} */\n        let virtualKeyboardOffset = this._overlayContainer.getContainerElement().getBoundingClientRect().top;\n        // Normally this would be zero, however when the overlay is attached to an input (e.g. in an\n        // autocomplete), mobile browsers will shift everything in order to put the input in the middle\n        // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n        // otherwise our positioning will be thrown off.\n        overlayPoint.y -= virtualKeyboardOffset;\n        // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n        // above or below the origin and the direction in which the element will expand.\n        if (position.overlayY === 'bottom') {\n            // When using `bottom`, we adjust the y position such that it is the distance\n            // from the bottom of the viewport rather than the top.\n            /** @type {?} */\n            const documentHeight = (/** @type {?} */ (this._document.documentElement)).clientHeight;\n            styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n        }\n        else {\n            styles.top = coerceCssPixelValue(overlayPoint.y);\n        }\n        return styles;\n    }\n    /**\n     * Gets the exact left/right for the overlay when not using flexible sizing or when pushing.\n     * @private\n     * @param {?} position\n     * @param {?} originPoint\n     * @param {?} scrollPosition\n     * @return {?}\n     */\n    _getExactOverlayX(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the preferred position has\n        // changed since the last `apply`.\n        /** @type {?} */\n        let styles = (/** @type {?} */ ({ left: null, right: null }));\n        /** @type {?} */\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n        // or \"after\" the origin, which determines the direction in which the element will expand.\n        // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n        // page is in RTL or LTR.\n        /** @type {?} */\n        let horizontalStyleProperty;\n        if (this._isRtl()) {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n        }\n        else {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n        }\n        // When we're setting `right`, we adjust the x position such that it is the distance\n        // from the right edge of the viewport rather than the left edge.\n        if (horizontalStyleProperty === 'right') {\n            /** @type {?} */\n            const documentWidth = (/** @type {?} */ (this._document.documentElement)).clientWidth;\n            styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n        }\n        else {\n            styles.left = coerceCssPixelValue(overlayPoint.x);\n        }\n        return styles;\n    }\n    /**\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\n     * or completely outside the view of any of the strategy's scrollables.\n     * @private\n     * @return {?}\n     */\n    _getScrollVisibility() {\n        // Note: needs fresh rects since the position could've changed.\n        /** @type {?} */\n        const originBounds = this._getOriginRect();\n        /** @type {?} */\n        const overlayBounds = this._pane.getBoundingClientRect();\n        // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n        // every time, we should be able to use the scrollTop of the containers if the size of those\n        // containers hasn't changed.\n        /** @type {?} */\n        const scrollContainerBounds = this._scrollables.map((/**\n         * @param {?} scrollable\n         * @return {?}\n         */\n        scrollable => {\n            return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n        }));\n        return {\n            isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n            isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n            isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n            isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n        };\n    }\n    /**\n     * Subtracts the amount that an element is overflowing on an axis from its length.\n     * @private\n     * @param {?} length\n     * @param {...?} overflows\n     * @return {?}\n     */\n    _subtractOverflows(length, ...overflows) {\n        return overflows.reduce((/**\n         * @param {?} currentValue\n         * @param {?} currentOverflow\n         * @return {?}\n         */\n        (currentValue, currentOverflow) => {\n            return currentValue - Math.max(currentOverflow, 0);\n        }), length);\n    }\n    /**\n     * Narrows the given viewport rect by the current _viewportMargin.\n     * @private\n     * @return {?}\n     */\n    _getNarrowedViewportRect() {\n        // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n        // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n        // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n        // and `innerHeight` that do. This is necessary, because the overlay container uses\n        // 100% `width` and `height` which don't include the scrollbar either.\n        /** @type {?} */\n        const width = (/** @type {?} */ (this._document.documentElement)).clientWidth;\n        /** @type {?} */\n        const height = (/** @type {?} */ (this._document.documentElement)).clientHeight;\n        /** @type {?} */\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n        return {\n            top: scrollPosition.top + this._viewportMargin,\n            left: scrollPosition.left + this._viewportMargin,\n            right: scrollPosition.left + width - this._viewportMargin,\n            bottom: scrollPosition.top + height - this._viewportMargin,\n            width: width - (2 * this._viewportMargin),\n            height: height - (2 * this._viewportMargin),\n        };\n    }\n    /**\n     * Whether the we're dealing with an RTL context\n     * @private\n     * @return {?}\n     */\n    _isRtl() {\n        return this._overlayRef.getDirection() === 'rtl';\n    }\n    /**\n     * Determines whether the overlay uses exact or flexible positioning.\n     * @private\n     * @return {?}\n     */\n    _hasExactPosition() {\n        return !this._hasFlexibleDimensions || this._isPushed;\n    }\n    /**\n     * Retrieves the offset of a position along the x or y axis.\n     * @private\n     * @param {?} position\n     * @param {?} axis\n     * @return {?}\n     */\n    _getOffset(position, axis) {\n        if (axis === 'x') {\n            // We don't do something like `position['offset' + axis]` in\n            // order to avoid breking minifiers that rename properties.\n            return position.offsetX == null ? this._offsetX : position.offsetX;\n        }\n        return position.offsetY == null ? this._offsetY : position.offsetY;\n    }\n    /**\n     * Validates that the current position match the expected values.\n     * @private\n     * @return {?}\n     */\n    _validatePositions() {\n        if (!this._preferredPositions.length) {\n            throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n        }\n        // TODO(crisbeto): remove these once Angular's template type\n        // checking is advanced enough to catch these cases.\n        this._preferredPositions.forEach((/**\n         * @param {?} pair\n         * @return {?}\n         */\n        pair => {\n            validateHorizontalPosition('originX', pair.originX);\n            validateVerticalPosition('originY', pair.originY);\n            validateHorizontalPosition('overlayX', pair.overlayX);\n            validateVerticalPosition('overlayY', pair.overlayY);\n        }));\n    }\n    /**\n     * Adds a single CSS class or an array of classes on the overlay panel.\n     * @private\n     * @param {?} cssClasses\n     * @return {?}\n     */\n    _addPanelClasses(cssClasses) {\n        if (this._pane) {\n            coerceArray(cssClasses).forEach((/**\n             * @param {?} cssClass\n             * @return {?}\n             */\n            cssClass => {\n                if (cssClass !== '' && this._appliedPanelClasses.indexOf(cssClass) === -1) {\n                    this._appliedPanelClasses.push(cssClass);\n                    this._pane.classList.add(cssClass);\n                }\n            }));\n        }\n    }\n    /**\n     * Clears the classes that the position strategy has applied from the overlay panel.\n     * @private\n     * @return {?}\n     */\n    _clearPanelClasses() {\n        if (this._pane) {\n            this._appliedPanelClasses.forEach((/**\n             * @param {?} cssClass\n             * @return {?}\n             */\n            cssClass => {\n                this._pane.classList.remove(cssClass);\n            }));\n            this._appliedPanelClasses = [];\n        }\n    }\n    /**\n     * Returns the ClientRect of the current origin.\n     * @private\n     * @return {?}\n     */\n    _getOriginRect() {\n        /** @type {?} */\n        const origin = this._origin;\n        if (origin instanceof ElementRef) {\n            return origin.nativeElement.getBoundingClientRect();\n        }\n        if (origin instanceof HTMLElement) {\n            return origin.getBoundingClientRect();\n        }\n        /** @type {?} */\n        const width = origin.width || 0;\n        /** @type {?} */\n        const height = origin.height || 0;\n        // If the origin is a point, return a client rect as if it was a 0x0 element at the point.\n        return {\n            top: origin.y,\n            bottom: origin.y + height,\n            left: origin.x,\n            right: origin.x + width,\n            height,\n            width\n        };\n    }\n}\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * @param {?} dest\n * @param {?} source\n * @return {?}\n */\nfunction extendStyles(dest, source) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            dest[key] = source[key];\n        }\n    }\n    return dest;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative to some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n * @deprecated Use `FlexibleConnectedPositionStrategy` instead.\n * \\@breaking-change 8.0.0\n */\nclass ConnectedPositionStrategy {\n    /**\n     * @param {?} originPos\n     * @param {?} overlayPos\n     * @param {?} connectedTo\n     * @param {?} viewportRuler\n     * @param {?} document\n     * @param {?} platform\n     * @param {?} overlayContainer\n     */\n    constructor(originPos, overlayPos, connectedTo, viewportRuler, document, platform, overlayContainer) {\n        /**\n         * Ordered list of preferred positions, from most to least desirable.\n         */\n        this._preferredPositions = [];\n        // Since the `ConnectedPositionStrategy` is deprecated and we don't want to maintain\n        // the extra logic, we create an instance of the positioning strategy that has some\n        // defaults that make it behave as the old position strategy and to which we'll\n        // proxy all of the API calls.\n        this._positionStrategy = new FlexibleConnectedPositionStrategy(connectedTo, viewportRuler, document, platform, overlayContainer)\n            .withFlexibleDimensions(false)\n            .withPush(false)\n            .withViewportMargin(0);\n        this.withFallbackPosition(originPos, overlayPos);\n    }\n    /**\n     * Whether the we're dealing with an RTL context\n     * @return {?}\n     */\n    get _isRtl() {\n        return this._overlayRef.getDirection() === 'rtl';\n    }\n    /**\n     * Emits an event when the connection point changes.\n     * @return {?}\n     */\n    get onPositionChange() {\n        return this._positionStrategy.positionChanges;\n    }\n    /**\n     * Ordered list of preferred positions, from most to least desirable.\n     * @return {?}\n     */\n    get positions() {\n        return this._preferredPositions;\n    }\n    /**\n     * Attach this position strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    attach(overlayRef) {\n        this._overlayRef = overlayRef;\n        this._positionStrategy.attach(overlayRef);\n        if (this._direction) {\n            overlayRef.setDirection(this._direction);\n            this._direction = null;\n        }\n    }\n    /**\n     * Disposes all resources used by the position strategy.\n     * @return {?}\n     */\n    dispose() {\n        this._positionStrategy.dispose();\n    }\n    /**\n     * \\@docs-private\n     * @return {?}\n     */\n    detach() {\n        this._positionStrategy.detach();\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin fits on-screen.\n     * \\@docs-private\n     * @return {?}\n     */\n    apply() {\n        this._positionStrategy.apply();\n    }\n    /**\n     * Re-positions the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     * @return {?}\n     */\n    recalculateLastPosition() {\n        this._positionStrategy.reapplyLastPosition();\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     * @param {?} scrollables\n     * @return {?}\n     */\n    withScrollableContainers(scrollables) {\n        this._positionStrategy.withScrollableContainers(scrollables);\n    }\n    /**\n     * Adds a new preferred fallback position.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} originPos\n     * @param {?} overlayPos\n     * @param {?=} offsetX\n     * @param {?=} offsetY\n     * @return {THIS}\n     */\n    withFallbackPosition(originPos, overlayPos, offsetX, offsetY) {\n        /** @type {?} */\n        const position = new ConnectionPositionPair(originPos, overlayPos, offsetX, offsetY);\n        (/** @type {?} */ (this))._preferredPositions.push(position);\n        (/** @type {?} */ (this))._positionStrategy.withPositions((/** @type {?} */ (this))._preferredPositions);\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the layout direction so the overlay's position can be adjusted to match.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} dir New layout direction.\n     * @return {THIS}\n     */\n    withDirection(dir) {\n        // Since the direction might be declared before the strategy is attached,\n        // we save the value in a temporary property and we'll transfer it to the\n        // overlay ref on attachment.\n        if ((/** @type {?} */ (this))._overlayRef) {\n            (/** @type {?} */ (this))._overlayRef.setDirection(dir);\n        }\n        else {\n            (/** @type {?} */ (this))._direction = dir;\n        }\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets an offset for the overlay's connection point on the x-axis\n     * @template THIS\n     * @this {THIS}\n     * @param {?} offset New offset in the X axis.\n     * @return {THIS}\n     */\n    withOffsetX(offset) {\n        (/** @type {?} */ (this))._positionStrategy.withDefaultOffsetX(offset);\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets an offset for the overlay's connection point on the y-axis\n     * @template THIS\n     * @this {THIS}\n     * @param {?} offset New offset in the Y axis.\n     * @return {THIS}\n     */\n    withOffsetY(offset) {\n        (/** @type {?} */ (this))._positionStrategy.withDefaultOffsetY(offset);\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @template THIS\n     * @this {THIS}\n     * @param {?} isLocked Whether the overlay should locked in.\n     * @return {THIS}\n     */\n    withLockedPosition(isLocked) {\n        (/** @type {?} */ (this))._positionStrategy.withLockedPosition(isLocked);\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Overwrites the current set of positions with an array of new ones.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} positions Position pairs to be set on the strategy.\n     * @return {THIS}\n     */\n    withPositions(positions) {\n        (/** @type {?} */ (this))._preferredPositions = positions.slice();\n        (/** @type {?} */ (this))._positionStrategy.withPositions((/** @type {?} */ (this))._preferredPositions);\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the origin element, relative to which to position the overlay.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} origin Reference to the new origin element.\n     * @return {THIS}\n     */\n    setOrigin(origin) {\n        (/** @type {?} */ (this))._positionStrategy.setOrigin(origin);\n        return (/** @type {?} */ (this));\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Class to be added to the overlay pane wrapper.\n * @type {?}\n */\nconst wrapperClass = 'cdk-global-overlay-wrapper';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nclass GlobalPositionStrategy {\n    constructor() {\n        this._cssPosition = 'static';\n        this._topOffset = '';\n        this._bottomOffset = '';\n        this._leftOffset = '';\n        this._rightOffset = '';\n        this._alignItems = '';\n        this._justifyContent = '';\n        this._width = '';\n        this._height = '';\n    }\n    /**\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    attach(overlayRef) {\n        /** @type {?} */\n        const config = overlayRef.getConfig();\n        this._overlayRef = overlayRef;\n        if (this._width && !config.width) {\n            overlayRef.updateSize({ width: this._width });\n        }\n        if (this._height && !config.height) {\n            overlayRef.updateSize({ height: this._height });\n        }\n        overlayRef.hostElement.classList.add(wrapperClass);\n        this._isDisposed = false;\n    }\n    /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} value New top offset.\n     * @return {THIS}\n     */\n    top(value = '') {\n        (/** @type {?} */ (this))._bottomOffset = '';\n        (/** @type {?} */ (this))._topOffset = value;\n        (/** @type {?} */ (this))._alignItems = 'flex-start';\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} value New left offset.\n     * @return {THIS}\n     */\n    left(value = '') {\n        (/** @type {?} */ (this))._rightOffset = '';\n        (/** @type {?} */ (this))._leftOffset = value;\n        (/** @type {?} */ (this))._justifyContent = 'flex-start';\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} value New bottom offset.\n     * @return {THIS}\n     */\n    bottom(value = '') {\n        (/** @type {?} */ (this))._topOffset = '';\n        (/** @type {?} */ (this))._bottomOffset = value;\n        (/** @type {?} */ (this))._alignItems = 'flex-end';\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} value New right offset.\n     * @return {THIS}\n     */\n    right(value = '') {\n        (/** @type {?} */ (this))._leftOffset = '';\n        (/** @type {?} */ (this))._rightOffset = value;\n        (/** @type {?} */ (this))._justifyContent = 'flex-end';\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the overlay width and clears any previously set width.\n     * @deprecated Pass the `width` through the `OverlayConfig`.\n     * \\@breaking-change 8.0.0\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} value New width for the overlay\n     * @return {THIS}\n     */\n    width(value = '') {\n        if ((/** @type {?} */ (this))._overlayRef) {\n            (/** @type {?} */ (this))._overlayRef.updateSize({ width: value });\n        }\n        else {\n            (/** @type {?} */ (this))._width = value;\n        }\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the overlay height and clears any previously set height.\n     * @deprecated Pass the `height` through the `OverlayConfig`.\n     * \\@breaking-change 8.0.0\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} value New height for the overlay\n     * @return {THIS}\n     */\n    height(value = '') {\n        if ((/** @type {?} */ (this))._overlayRef) {\n            (/** @type {?} */ (this))._overlayRef.updateSize({ height: value });\n        }\n        else {\n            (/** @type {?} */ (this))._height = value;\n        }\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} offset Overlay offset from the horizontal center.\n     * @return {THIS}\n     */\n    centerHorizontally(offset = '') {\n        (/** @type {?} */ (this)).left(offset);\n        (/** @type {?} */ (this))._justifyContent = 'center';\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} offset Overlay offset from the vertical center.\n     * @return {THIS}\n     */\n    centerVertically(offset = '') {\n        (/** @type {?} */ (this)).top(offset);\n        (/** @type {?} */ (this))._alignItems = 'center';\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Apply the position to the element.\n     * \\@docs-private\n     * @return {?}\n     */\n    apply() {\n        // Since the overlay ref applies the strategy asynchronously, it could\n        // have been disposed before it ends up being applied. If that is the\n        // case, we shouldn't do anything.\n        if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n            return;\n        }\n        /** @type {?} */\n        const styles = this._overlayRef.overlayElement.style;\n        /** @type {?} */\n        const parentStyles = this._overlayRef.hostElement.style;\n        /** @type {?} */\n        const config = this._overlayRef.getConfig();\n        styles.position = this._cssPosition;\n        styles.marginLeft = config.width === '100%' ? '0' : this._leftOffset;\n        styles.marginTop = config.height === '100%' ? '0' : this._topOffset;\n        styles.marginBottom = this._bottomOffset;\n        styles.marginRight = this._rightOffset;\n        if (config.width === '100%') {\n            parentStyles.justifyContent = 'flex-start';\n        }\n        else if (this._justifyContent === 'center') {\n            parentStyles.justifyContent = 'center';\n        }\n        else if (this._overlayRef.getConfig().direction === 'rtl') {\n            // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\n            // don't want that because our positioning is explicitly `left` and `right`, hence\n            // why we do another inversion to ensure that the overlay stays in the same position.\n            // TODO: reconsider this if we add `start` and `end` methods.\n            if (this._justifyContent === 'flex-start') {\n                parentStyles.justifyContent = 'flex-end';\n            }\n            else if (this._justifyContent === 'flex-end') {\n                parentStyles.justifyContent = 'flex-start';\n            }\n        }\n        else {\n            parentStyles.justifyContent = this._justifyContent;\n        }\n        parentStyles.alignItems = config.height === '100%' ? 'flex-start' : this._alignItems;\n    }\n    /**\n     * Cleans up the DOM changes from the position strategy.\n     * \\@docs-private\n     * @return {?}\n     */\n    dispose() {\n        if (this._isDisposed || !this._overlayRef) {\n            return;\n        }\n        /** @type {?} */\n        const styles = this._overlayRef.overlayElement.style;\n        /** @type {?} */\n        const parent = this._overlayRef.hostElement;\n        /** @type {?} */\n        const parentStyles = parent.style;\n        parent.classList.remove(wrapperClass);\n        parentStyles.justifyContent = parentStyles.alignItems = styles.marginTop =\n            styles.marginBottom = styles.marginLeft = styles.marginRight = styles.position = '';\n        this._overlayRef = (/** @type {?} */ (null));\n        this._isDisposed = true;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Builder for overlay position strategy.\n */\nclass OverlayPositionBuilder {\n    /**\n     * @param {?} _viewportRuler\n     * @param {?} _document\n     * @param {?} _platform\n     * @param {?} _overlayContainer\n     */\n    constructor(_viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n    }\n    /**\n     * Creates a global position strategy.\n     * @return {?}\n     */\n    global() {\n        return new GlobalPositionStrategy();\n    }\n    /**\n     * Creates a relative position strategy.\n     * @deprecated Use `flexibleConnectedTo` instead.\n     * \\@breaking-change 8.0.0\n     * @param {?} elementRef\n     * @param {?} originPos\n     * @param {?} overlayPos\n     * @return {?}\n     */\n    connectedTo(elementRef, originPos, overlayPos) {\n        return new ConnectedPositionStrategy(originPos, overlayPos, elementRef, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    }\n    /**\n     * Creates a flexible position strategy.\n     * @param {?} origin Origin relative to which to position the overlay.\n     * @return {?}\n     */\n    flexibleConnectedTo(origin) {\n        return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    }\n}\nOverlayPositionBuilder.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] },\n];\n/** @nocollapse */\nOverlayPositionBuilder.ctorParameters = () => [\n    { type: ViewportRuler },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform },\n    { type: OverlayContainer }\n];\n/** @nocollapse */ OverlayPositionBuilder.ngInjectableDef = ɵɵdefineInjectable({ factory: function OverlayPositionBuilder_Factory() { return new OverlayPositionBuilder(ɵɵinject(ViewportRuler), ɵɵinject(DOCUMENT), ɵɵinject(Platform), ɵɵinject(OverlayContainer)); }, token: OverlayPositionBuilder, providedIn: \"root\" });\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Next overlay unique ID.\n * @type {?}\n */\nlet nextUniqueId = 0;\n// Note that Overlay is *not* scoped to the app root because the ComponentFactoryResolver\n// it needs is different based on where OverlayModule is imported.\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\nclass Overlay {\n    /**\n     * @param {?} scrollStrategies\n     * @param {?} _overlayContainer\n     * @param {?} _componentFactoryResolver\n     * @param {?} _positionBuilder\n     * @param {?} _keyboardDispatcher\n     * @param {?} _injector\n     * @param {?} _ngZone\n     * @param {?} _document\n     * @param {?} _directionality\n     * @param {?=} _location\n     */\n    constructor(scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, _location) {\n        this.scrollStrategies = scrollStrategies;\n        this._overlayContainer = _overlayContainer;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._positionBuilder = _positionBuilder;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._injector = _injector;\n        this._ngZone = _ngZone;\n        this._document = _document;\n        this._directionality = _directionality;\n        this._location = _location;\n    }\n    /**\n     * Creates an overlay.\n     * @param {?=} config Configuration applied to the overlay.\n     * @return {?} Reference to the created overlay.\n     */\n    create(config) {\n        /** @type {?} */\n        const host = this._createHostElement();\n        /** @type {?} */\n        const pane = this._createPaneElement(host);\n        /** @type {?} */\n        const portalOutlet = this._createPortalOutlet(pane);\n        /** @type {?} */\n        const overlayConfig = new OverlayConfig(config);\n        overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n        return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location);\n    }\n    /**\n     * Gets a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     * @return {?} An overlay position builder.\n     */\n    position() {\n        return this._positionBuilder;\n    }\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @private\n     * @param {?} host\n     * @return {?} Newly-created pane element\n     */\n    _createPaneElement(host) {\n        /** @type {?} */\n        const pane = this._document.createElement('div');\n        pane.id = `cdk-overlay-${nextUniqueId++}`;\n        pane.classList.add('cdk-overlay-pane');\n        host.appendChild(pane);\n        return pane;\n    }\n    /**\n     * Creates the host element that wraps around an overlay\n     * and can be used for advanced positioning.\n     * @private\n     * @return {?} Newly-create host element.\n     */\n    _createHostElement() {\n        /** @type {?} */\n        const host = this._document.createElement('div');\n        this._overlayContainer.getContainerElement().appendChild(host);\n        return host;\n    }\n    /**\n     * Create a DomPortalOutlet into which the overlay content can be loaded.\n     * @private\n     * @param {?} pane The DOM element to turn into a portal outlet.\n     * @return {?} A portal outlet for the given DOM element.\n     */\n    _createPortalOutlet(pane) {\n        // We have to resolve the ApplicationRef later in order to allow people\n        // to use overlay-based providers during app initialization.\n        if (!this._appRef) {\n            this._appRef = this._injector.get(ApplicationRef);\n        }\n        return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector);\n    }\n}\nOverlay.decorators = [\n    { type: Injectable },\n];\n/** @nocollapse */\nOverlay.ctorParameters = () => [\n    { type: ScrollStrategyOptions },\n    { type: OverlayContainer },\n    { type: ComponentFactoryResolver },\n    { type: OverlayPositionBuilder },\n    { type: OverlayKeyboardDispatcher },\n    { type: Injector },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Directionality },\n    { type: Location, decorators: [{ type: Optional }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Default set of positions for the overlay. Follows the behavior of a dropdown.\n * @type {?}\n */\nconst defaultPositionList = [\n    {\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'top'\n    },\n    {\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'bottom'\n    },\n    {\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'bottom'\n    },\n    {\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'top'\n    }\n];\n/**\n * Injection token that determines the scroll handling while the connected overlay is open.\n * @type {?}\n */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new InjectionToken('cdk-connected-overlay-scroll-strategy');\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nclass CdkOverlayOrigin {\n    /**\n     * @param {?} elementRef\n     */\n    constructor(elementRef) {\n        this.elementRef = elementRef;\n    }\n}\nCdkOverlayOrigin.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n                exportAs: 'cdkOverlayOrigin',\n            },] },\n];\n/** @nocollapse */\nCdkOverlayOrigin.ctorParameters = () => [\n    { type: ElementRef }\n];\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\nclass CdkConnectedOverlay {\n    // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n    /**\n     * @param {?} _overlay\n     * @param {?} templateRef\n     * @param {?} viewContainerRef\n     * @param {?} scrollStrategyFactory\n     * @param {?} _dir\n     */\n    constructor(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {\n        this._overlay = _overlay;\n        this._dir = _dir;\n        this._hasBackdrop = false;\n        this._lockPosition = false;\n        this._growAfterOpen = false;\n        this._flexibleDimensions = false;\n        this._push = false;\n        this._backdropSubscription = Subscription.EMPTY;\n        /**\n         * Margin between the overlay and the viewport edges.\n         */\n        this.viewportMargin = 0;\n        /**\n         * Whether the overlay is open.\n         */\n        this.open = false;\n        /**\n         * Event emitted when the backdrop is clicked.\n         */\n        this.backdropClick = new EventEmitter();\n        /**\n         * Event emitted when the position has changed.\n         */\n        this.positionChange = new EventEmitter();\n        /**\n         * Event emitted when the overlay has been attached.\n         */\n        this.attach = new EventEmitter();\n        /**\n         * Event emitted when the overlay has been detached.\n         */\n        this.detach = new EventEmitter();\n        /**\n         * Emits when there are keyboard events that are targeted at the overlay.\n         */\n        this.overlayKeydown = new EventEmitter();\n        this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this.scrollStrategy = this._scrollStrategyFactory();\n    }\n    /**\n     * The offset in pixels for the overlay connection point on the x-axis\n     * @return {?}\n     */\n    get offsetX() { return this._offsetX; }\n    /**\n     * @param {?} offsetX\n     * @return {?}\n     */\n    set offsetX(offsetX) {\n        this._offsetX = offsetX;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /**\n     * The offset in pixels for the overlay connection point on the y-axis\n     * @return {?}\n     */\n    get offsetY() { return this._offsetY; }\n    /**\n     * @param {?} offsetY\n     * @return {?}\n     */\n    set offsetY(offsetY) {\n        this._offsetY = offsetY;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /**\n     * Whether or not the overlay should attach a backdrop.\n     * @return {?}\n     */\n    get hasBackdrop() { return this._hasBackdrop; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set hasBackdrop(value) { this._hasBackdrop = coerceBooleanProperty(value); }\n    /**\n     * Whether or not the overlay should be locked when scrolling.\n     * @return {?}\n     */\n    get lockPosition() { return this._lockPosition; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set lockPosition(value) { this._lockPosition = coerceBooleanProperty(value); }\n    /**\n     * Whether the overlay's width and height can be constrained to fit within the viewport.\n     * @return {?}\n     */\n    get flexibleDimensions() { return this._flexibleDimensions; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set flexibleDimensions(value) {\n        this._flexibleDimensions = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the overlay can grow after the initial open when flexible positioning is turned on.\n     * @return {?}\n     */\n    get growAfterOpen() { return this._growAfterOpen; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set growAfterOpen(value) { this._growAfterOpen = coerceBooleanProperty(value); }\n    /**\n     * Whether the overlay can be pushed on-screen if none of the provided positions fit.\n     * @return {?}\n     */\n    get push() { return this._push; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set push(value) { this._push = coerceBooleanProperty(value); }\n    /**\n     * The associated overlay reference.\n     * @return {?}\n     */\n    get overlayRef() {\n        return this._overlayRef;\n    }\n    /**\n     * The element's layout direction.\n     * @return {?}\n     */\n    get dir() {\n        return this._dir ? this._dir.value : 'ltr';\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n        }\n        this._backdropSubscription.unsubscribe();\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n            this._overlayRef.updateSize({\n                width: this.width,\n                minWidth: this.minWidth,\n                height: this.height,\n                minHeight: this.minHeight,\n            });\n            if (changes['origin'] && this.open) {\n                this._position.apply();\n            }\n        }\n        if (changes['open']) {\n            this.open ? this._attachOverlay() : this._detachOverlay();\n        }\n    }\n    /**\n     * Creates an overlay\n     * @private\n     * @return {?}\n     */\n    _createOverlay() {\n        if (!this.positions || !this.positions.length) {\n            this.positions = defaultPositionList;\n        }\n        this._overlayRef = this._overlay.create(this._buildConfig());\n        this._overlayRef.keydownEvents().subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            this.overlayKeydown.next(event);\n            if (event.keyCode === ESCAPE && !hasModifierKey(event)) {\n                event.preventDefault();\n                this._detachOverlay();\n            }\n        }));\n    }\n    /**\n     * Builds the overlay config based on the directive's inputs\n     * @private\n     * @return {?}\n     */\n    _buildConfig() {\n        /** @type {?} */\n        const positionStrategy = this._position = this._createPositionStrategy();\n        /** @type {?} */\n        const overlayConfig = new OverlayConfig({\n            direction: this._dir,\n            positionStrategy,\n            scrollStrategy: this.scrollStrategy,\n            hasBackdrop: this.hasBackdrop\n        });\n        if (this.width || this.width === 0) {\n            overlayConfig.width = this.width;\n        }\n        if (this.height || this.height === 0) {\n            overlayConfig.height = this.height;\n        }\n        if (this.minWidth || this.minWidth === 0) {\n            overlayConfig.minWidth = this.minWidth;\n        }\n        if (this.minHeight || this.minHeight === 0) {\n            overlayConfig.minHeight = this.minHeight;\n        }\n        if (this.backdropClass) {\n            overlayConfig.backdropClass = this.backdropClass;\n        }\n        if (this.panelClass) {\n            overlayConfig.panelClass = this.panelClass;\n        }\n        return overlayConfig;\n    }\n    /**\n     * Updates the state of a position strategy, based on the values of the directive inputs.\n     * @private\n     * @param {?} positionStrategy\n     * @return {?}\n     */\n    _updatePositionStrategy(positionStrategy) {\n        /** @type {?} */\n        const positions = this.positions.map((/**\n         * @param {?} currentPosition\n         * @return {?}\n         */\n        currentPosition => ({\n            originX: currentPosition.originX,\n            originY: currentPosition.originY,\n            overlayX: currentPosition.overlayX,\n            overlayY: currentPosition.overlayY,\n            offsetX: currentPosition.offsetX || this.offsetX,\n            offsetY: currentPosition.offsetY || this.offsetY,\n            panelClass: currentPosition.panelClass || undefined,\n        })));\n        return positionStrategy\n            .setOrigin(this.origin.elementRef)\n            .withPositions(positions)\n            .withFlexibleDimensions(this.flexibleDimensions)\n            .withPush(this.push)\n            .withGrowAfterOpen(this.growAfterOpen)\n            .withViewportMargin(this.viewportMargin)\n            .withLockedPosition(this.lockPosition);\n    }\n    /**\n     * Returns the position strategy of the overlay to be set on the overlay config\n     * @private\n     * @return {?}\n     */\n    _createPositionStrategy() {\n        /** @type {?} */\n        const strategy = this._overlay.position().flexibleConnectedTo(this.origin.elementRef);\n        this._updatePositionStrategy(strategy);\n        strategy.positionChanges.subscribe((/**\n         * @param {?} p\n         * @return {?}\n         */\n        p => this.positionChange.emit(p)));\n        return strategy;\n    }\n    /**\n     * Attaches the overlay and subscribes to backdrop clicks if backdrop exists\n     * @private\n     * @return {?}\n     */\n    _attachOverlay() {\n        if (!this._overlayRef) {\n            this._createOverlay();\n        }\n        else {\n            // Update the overlay size, in case the directive's inputs have changed\n            this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\n        }\n        if (!this._overlayRef.hasAttached()) {\n            this._overlayRef.attach(this._templatePortal);\n            this.attach.emit();\n        }\n        if (this.hasBackdrop) {\n            this._backdropSubscription = this._overlayRef.backdropClick().subscribe((/**\n             * @param {?} event\n             * @return {?}\n             */\n            event => {\n                this.backdropClick.emit(event);\n            }));\n        }\n        else {\n            this._backdropSubscription.unsubscribe();\n        }\n    }\n    /**\n     * Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists\n     * @private\n     * @return {?}\n     */\n    _detachOverlay() {\n        if (this._overlayRef) {\n            this._overlayRef.detach();\n            this.detach.emit();\n        }\n        this._backdropSubscription.unsubscribe();\n    }\n}\nCdkConnectedOverlay.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n                exportAs: 'cdkConnectedOverlay'\n            },] },\n];\n/** @nocollapse */\nCdkConnectedOverlay.ctorParameters = () => [\n    { type: Overlay },\n    { type: TemplateRef },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nCdkConnectedOverlay.propDecorators = {\n    origin: [{ type: Input, args: ['cdkConnectedOverlayOrigin',] }],\n    positions: [{ type: Input, args: ['cdkConnectedOverlayPositions',] }],\n    offsetX: [{ type: Input, args: ['cdkConnectedOverlayOffsetX',] }],\n    offsetY: [{ type: Input, args: ['cdkConnectedOverlayOffsetY',] }],\n    width: [{ type: Input, args: ['cdkConnectedOverlayWidth',] }],\n    height: [{ type: Input, args: ['cdkConnectedOverlayHeight',] }],\n    minWidth: [{ type: Input, args: ['cdkConnectedOverlayMinWidth',] }],\n    minHeight: [{ type: Input, args: ['cdkConnectedOverlayMinHeight',] }],\n    backdropClass: [{ type: Input, args: ['cdkConnectedOverlayBackdropClass',] }],\n    panelClass: [{ type: Input, args: ['cdkConnectedOverlayPanelClass',] }],\n    viewportMargin: [{ type: Input, args: ['cdkConnectedOverlayViewportMargin',] }],\n    scrollStrategy: [{ type: Input, args: ['cdkConnectedOverlayScrollStrategy',] }],\n    open: [{ type: Input, args: ['cdkConnectedOverlayOpen',] }],\n    hasBackdrop: [{ type: Input, args: ['cdkConnectedOverlayHasBackdrop',] }],\n    lockPosition: [{ type: Input, args: ['cdkConnectedOverlayLockPosition',] }],\n    flexibleDimensions: [{ type: Input, args: ['cdkConnectedOverlayFlexibleDimensions',] }],\n    growAfterOpen: [{ type: Input, args: ['cdkConnectedOverlayGrowAfterOpen',] }],\n    push: [{ type: Input, args: ['cdkConnectedOverlayPush',] }],\n    backdropClick: [{ type: Output }],\n    positionChange: [{ type: Output }],\n    attach: [{ type: Output }],\n    detach: [{ type: Output }],\n    overlayKeydown: [{ type: Output }]\n};\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return (/**\n     * @return {?}\n     */\n    () => overlay.scrollStrategies.reposition());\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n    provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass OverlayModule {\n}\nOverlayModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [BidiModule, PortalModule, ScrollingModule],\n                exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n                declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n                providers: [\n                    Overlay,\n                    CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n                ],\n            },] },\n];\n/**\n * @deprecated Use `OverlayModule` instead.\n * \\@breaking-change 8.0.0\n * \\@docs-private\n * @type {?}\n */\nconst OVERLAY_PROVIDERS = [\n    Overlay,\n    OverlayPositionBuilder,\n    OVERLAY_KEYBOARD_DISPATCHER_PROVIDER,\n    VIEWPORT_RULER_PROVIDER,\n    OVERLAY_CONTAINER_PROVIDER,\n    CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\nclass FullscreenOverlayContainer extends OverlayContainer {\n    /**\n     * @param {?} _document\n     */\n    constructor(_document) {\n        super(_document);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        if (this._fullScreenEventName && this._fullScreenListener) {\n            this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n        }\n    }\n    /**\n     * @protected\n     * @return {?}\n     */\n    _createContainer() {\n        super._createContainer();\n        this._adjustParentForFullscreenChange();\n        this._addFullscreenChangeListener((/**\n         * @return {?}\n         */\n        () => this._adjustParentForFullscreenChange()));\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _adjustParentForFullscreenChange() {\n        if (!this._containerElement) {\n            return;\n        }\n        /** @type {?} */\n        const fullscreenElement = this.getFullscreenElement();\n        /** @type {?} */\n        const parent = fullscreenElement || this._document.body;\n        parent.appendChild(this._containerElement);\n    }\n    /**\n     * @private\n     * @param {?} fn\n     * @return {?}\n     */\n    _addFullscreenChangeListener(fn) {\n        /** @type {?} */\n        const eventName = this._getEventName();\n        if (eventName) {\n            if (this._fullScreenListener) {\n                this._document.removeEventListener(eventName, this._fullScreenListener);\n            }\n            this._document.addEventListener(eventName, fn);\n            this._fullScreenListener = fn;\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _getEventName() {\n        if (!this._fullScreenEventName) {\n            /** @type {?} */\n            const _document = (/** @type {?} */ (this._document));\n            if (_document.fullscreenEnabled) {\n                this._fullScreenEventName = 'fullscreenchange';\n            }\n            else if (_document.webkitFullscreenEnabled) {\n                this._fullScreenEventName = 'webkitfullscreenchange';\n            }\n            else if (_document.mozFullScreenEnabled) {\n                this._fullScreenEventName = 'mozfullscreenchange';\n            }\n            else if (_document.msFullscreenEnabled) {\n                this._fullScreenEventName = 'MSFullscreenChange';\n            }\n        }\n        return this._fullScreenEventName;\n    }\n    /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     * @return {?}\n     */\n    getFullscreenElement() {\n        /** @type {?} */\n        const _document = (/** @type {?} */ (this._document));\n        return _document.fullscreenElement ||\n            _document.webkitFullscreenElement ||\n            _document.mozFullScreenElement ||\n            _document.msFullscreenElement ||\n            null;\n    }\n}\nFullscreenOverlayContainer.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] },\n];\n/** @nocollapse */\nFullscreenOverlayContainer.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/** @nocollapse */ FullscreenOverlayContainer.ngInjectableDef = ɵɵdefineInjectable({ factory: function FullscreenOverlayContainer_Factory() { return new FullscreenOverlayContainer(ɵɵinject(DOCUMENT)); }, token: FullscreenOverlayContainer, providedIn: \"root\" });\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { Overlay, OverlayContainer, CdkOverlayOrigin, CdkConnectedOverlay, FullscreenOverlayContainer, OverlayRef, OverlayKeyboardDispatcher, OverlayPositionBuilder, GlobalPositionStrategy, ConnectedPositionStrategy, FlexibleConnectedPositionStrategy, OverlayConfig, validateVerticalPosition, validateHorizontalPosition, ConnectionPositionPair, ScrollingVisibility, ConnectedOverlayPositionChange, ScrollStrategyOptions, RepositionScrollStrategy, CloseScrollStrategy, NoopScrollStrategy, BlockScrollStrategy, OverlayModule, OVERLAY_PROVIDERS, OVERLAY_KEYBOARD_DISPATCHER_PROVIDER as ɵg, OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY as ɵf, OVERLAY_CONTAINER_PROVIDER as ɵb, OVERLAY_CONTAINER_PROVIDER_FACTORY as ɵa, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY as ɵc, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER as ɵe, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY as ɵd };\n//# sourceMappingURL=overlay.js.map\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken, Directive, forwardRef, Input, Injectable, NgZone, Optional, SkipSelf, ElementRef, NgModule, IterableDiffers, TemplateRef, ViewContainerRef, ChangeDetectionStrategy, ChangeDetectorRef, Component, Inject, Output, ViewChild, ViewEncapsulation, ɵɵdefineInjectable, ɵɵinject } from '@angular/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Subject, fromEvent, of, Observable, animationFrameScheduler, asapScheduler, merge } from 'rxjs';\nimport { distinctUntilChanged, auditTime, filter, takeUntil, startWith, pairwise, shareReplay, switchMap } from 'rxjs/operators';\nimport { Platform, getRtlScrollAxisType, RtlScrollAxisType, supportsScrollBehavior, PlatformModule } from '@angular/cdk/platform';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { ArrayDataSource, isDataSource } from '@angular/cdk/collections';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The injection token used to specify the virtual scrolling strategy.\n * @type {?}\n */\nconst VIRTUAL_SCROLL_STRATEGY = new InjectionToken('VIRTUAL_SCROLL_STRATEGY');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Virtual scrolling strategy for lists with items of known fixed size.\n */\nclass FixedSizeVirtualScrollStrategy {\n    /**\n     * @param {?} itemSize The size of the items in the virtually scrolling list.\n     * @param {?} minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param {?} maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    constructor(itemSize, minBufferPx, maxBufferPx) {\n        this._scrolledIndexChange = new Subject();\n        /**\n         * \\@docs-private Implemented as part of VirtualScrollStrategy.\n         */\n        this.scrolledIndexChange = this._scrolledIndexChange.pipe(distinctUntilChanged());\n        /**\n         * The attached viewport.\n         */\n        this._viewport = null;\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n    }\n    /**\n     * Attaches this scroll strategy to a viewport.\n     * @param {?} viewport The viewport to attach this strategy to.\n     * @return {?}\n     */\n    attach(viewport) {\n        this._viewport = viewport;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /**\n     * Detaches this scroll strategy from the currently attached viewport.\n     * @return {?}\n     */\n    detach() {\n        this._scrolledIndexChange.complete();\n        this._viewport = null;\n    }\n    /**\n     * Update the item size and buffer size.\n     * @param {?} itemSize The size of the items in the virtually scrolling list.\n     * @param {?} minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param {?} maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     * @return {?}\n     */\n    updateItemAndBufferSize(itemSize, minBufferPx, maxBufferPx) {\n        if (maxBufferPx < minBufferPx) {\n            throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\n        }\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     * @return {?}\n     */\n    onContentScrolled() {\n        this._updateRenderedRange();\n    }\n    /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     * @return {?}\n     */\n    onDataLengthChanged() {\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     * @return {?}\n     */\n    onContentRendered() { }\n    /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     * @return {?}\n     */\n    onRenderedOffsetChanged() { }\n    /**\n     * Scroll to the offset for the given index.\n     * @param {?} index The index of the element to scroll to.\n     * @param {?} behavior The ScrollBehavior to use when scrolling.\n     * @return {?}\n     */\n    scrollToIndex(index, behavior) {\n        if (this._viewport) {\n            this._viewport.scrollToOffset(index * this._itemSize, behavior);\n        }\n    }\n    /**\n     * Update the viewport's total content size.\n     * @private\n     * @return {?}\n     */\n    _updateTotalContentSize() {\n        if (!this._viewport) {\n            return;\n        }\n        this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\n    }\n    /**\n     * Update the viewport's rendered range.\n     * @private\n     * @return {?}\n     */\n    _updateRenderedRange() {\n        if (!this._viewport) {\n            return;\n        }\n        /** @type {?} */\n        const scrollOffset = this._viewport.measureScrollOffset();\n        /** @type {?} */\n        const firstVisibleIndex = scrollOffset / this._itemSize;\n        /** @type {?} */\n        const renderedRange = this._viewport.getRenderedRange();\n        /** @type {?} */\n        const newRange = { start: renderedRange.start, end: renderedRange.end };\n        /** @type {?} */\n        const viewportSize = this._viewport.getViewportSize();\n        /** @type {?} */\n        const dataLength = this._viewport.getDataLength();\n        /** @type {?} */\n        const startBuffer = scrollOffset - newRange.start * this._itemSize;\n        if (startBuffer < this._minBufferPx && newRange.start != 0) {\n            /** @type {?} */\n            const expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);\n            newRange.start = Math.max(0, newRange.start - expandStart);\n            newRange.end = Math.min(dataLength, Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));\n        }\n        else {\n            /** @type {?} */\n            const endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);\n            if (endBuffer < this._minBufferPx && newRange.end != dataLength) {\n                /** @type {?} */\n                const expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);\n                if (expandEnd > 0) {\n                    newRange.end = Math.min(dataLength, newRange.end + expandEnd);\n                    newRange.start = Math.max(0, Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));\n                }\n            }\n        }\n        this._viewport.setRenderedRange(newRange);\n        this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);\n        this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));\n    }\n}\n/**\n * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\n * `FixedSizeVirtualScrollStrategy` from the given directive.\n * @param {?} fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\n *     `FixedSizeVirtualScrollStrategy` from.\n * @return {?}\n */\nfunction _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir) {\n    return fixedSizeDir._scrollStrategy;\n}\n/**\n * A virtual scroll strategy that supports fixed-size items.\n */\nclass CdkFixedSizeVirtualScroll {\n    constructor() {\n        this._itemSize = 20;\n        this._minBufferPx = 100;\n        this._maxBufferPx = 200;\n        /**\n         * The scroll strategy used by this directive.\n         */\n        this._scrollStrategy = new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n    /**\n     * The size of the items in the list (in pixels).\n     * @return {?}\n     */\n    get itemSize() { return this._itemSize; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set itemSize(value) { this._itemSize = coerceNumberProperty(value); }\n    /**\n     * The minimum amount of buffer rendered beyond the viewport (in pixels).\n     * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\n     * @return {?}\n     */\n    get minBufferPx() { return this._minBufferPx; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set minBufferPx(value) { this._minBufferPx = coerceNumberProperty(value); }\n    /**\n     * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\n     * @return {?}\n     */\n    get maxBufferPx() { return this._maxBufferPx; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set maxBufferPx(value) { this._maxBufferPx = coerceNumberProperty(value); }\n    /**\n     * @return {?}\n     */\n    ngOnChanges() {\n        this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n}\nCdkFixedSizeVirtualScroll.decorators = [\n    { type: Directive, args: [{\n                selector: 'cdk-virtual-scroll-viewport[itemSize]',\n                providers: [{\n                        provide: VIRTUAL_SCROLL_STRATEGY,\n                        useFactory: _fixedSizeVirtualScrollStrategyFactory,\n                        deps: [forwardRef((/**\n                             * @return {?}\n                             */\n                            () => CdkFixedSizeVirtualScroll))],\n                    }],\n            },] },\n];\nCdkFixedSizeVirtualScroll.propDecorators = {\n    itemSize: [{ type: Input }],\n    minBufferPx: [{ type: Input }],\n    maxBufferPx: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Time in ms to throttle the scrolling events by default.\n * @type {?}\n */\nconst DEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\nclass ScrollDispatcher {\n    /**\n     * @param {?} _ngZone\n     * @param {?} _platform\n     */\n    constructor(_ngZone, _platform) {\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        /**\n         * Subject for notifying that a registered scrollable reference element has been scrolled.\n         */\n        this._scrolled = new Subject();\n        /**\n         * Keeps track of the global `scroll` and `resize` subscriptions.\n         */\n        this._globalSubscription = null;\n        /**\n         * Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards.\n         */\n        this._scrolledCount = 0;\n        /**\n         * Map of all the scrollable references that are registered with the service and their\n         * scroll event subscriptions.\n         */\n        this.scrollContainers = new Map();\n    }\n    /**\n     * Registers a scrollable instance with the service and listens for its scrolled events. When the\n     * scrollable is scrolled, the service emits the event to its scrolled observable.\n     * @param {?} scrollable Scrollable instance to be registered.\n     * @return {?}\n     */\n    register(scrollable) {\n        if (!this.scrollContainers.has(scrollable)) {\n            this.scrollContainers.set(scrollable, scrollable.elementScrolled()\n                .subscribe((/**\n             * @return {?}\n             */\n            () => this._scrolled.next(scrollable))));\n        }\n    }\n    /**\n     * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n     * @param {?} scrollable Scrollable instance to be deregistered.\n     * @return {?}\n     */\n    deregister(scrollable) {\n        /** @type {?} */\n        const scrollableReference = this.scrollContainers.get(scrollable);\n        if (scrollableReference) {\n            scrollableReference.unsubscribe();\n            this.scrollContainers.delete(scrollable);\n        }\n    }\n    /**\n     * Returns an observable that emits an event whenever any of the registered Scrollable\n     * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n     * to override the default \"throttle\" time.\n     *\n     * **Note:** in order to avoid hitting change detection for every scroll event,\n     * all of the events emitted from this stream will be run outside the Angular zone.\n     * If you need to update any data bindings as a result of a scroll event, you have\n     * to run the callback using `NgZone.run`.\n     * @param {?=} auditTimeInMs\n     * @return {?}\n     */\n    scrolled(auditTimeInMs = DEFAULT_SCROLL_TIME) {\n        if (!this._platform.isBrowser) {\n            return of();\n        }\n        return new Observable((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        (observer) => {\n            if (!this._globalSubscription) {\n                this._addGlobalListener();\n            }\n            // In the case of a 0ms delay, use an observable without auditTime\n            // since it does add a perceptible delay in processing overhead.\n            /** @type {?} */\n            const subscription = auditTimeInMs > 0 ?\n                this._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer) :\n                this._scrolled.subscribe(observer);\n            this._scrolledCount++;\n            return (/**\n             * @return {?}\n             */\n            () => {\n                subscription.unsubscribe();\n                this._scrolledCount--;\n                if (!this._scrolledCount) {\n                    this._removeGlobalListener();\n                }\n            });\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._removeGlobalListener();\n        this.scrollContainers.forEach((/**\n         * @param {?} _\n         * @param {?} container\n         * @return {?}\n         */\n        (_, container) => this.deregister(container)));\n        this._scrolled.complete();\n    }\n    /**\n     * Returns an observable that emits whenever any of the\n     * scrollable ancestors of an element are scrolled.\n     * @param {?} elementRef Element whose ancestors to listen for.\n     * @param {?=} auditTimeInMs Time to throttle the scroll events.\n     * @return {?}\n     */\n    ancestorScrolled(elementRef, auditTimeInMs) {\n        /** @type {?} */\n        const ancestors = this.getAncestorScrollContainers(elementRef);\n        return this.scrolled(auditTimeInMs).pipe(filter((/**\n         * @param {?} target\n         * @return {?}\n         */\n        target => {\n            return !target || ancestors.indexOf(target) > -1;\n        })));\n    }\n    /**\n     * Returns all registered Scrollables that contain the provided element.\n     * @param {?} elementRef\n     * @return {?}\n     */\n    getAncestorScrollContainers(elementRef) {\n        /** @type {?} */\n        const scrollingContainers = [];\n        this.scrollContainers.forEach((/**\n         * @param {?} _subscription\n         * @param {?} scrollable\n         * @return {?}\n         */\n        (_subscription, scrollable) => {\n            if (this._scrollableContainsElement(scrollable, elementRef)) {\n                scrollingContainers.push(scrollable);\n            }\n        }));\n        return scrollingContainers;\n    }\n    /**\n     * Returns true if the element is contained within the provided Scrollable.\n     * @private\n     * @param {?} scrollable\n     * @param {?} elementRef\n     * @return {?}\n     */\n    _scrollableContainsElement(scrollable, elementRef) {\n        /** @type {?} */\n        let element = elementRef.nativeElement;\n        /** @type {?} */\n        let scrollableElement = scrollable.getElementRef().nativeElement;\n        // Traverse through the element parents until we reach null, checking if any of the elements\n        // are the scrollable's element.\n        do {\n            if (element == scrollableElement) {\n                return true;\n            }\n        } while (element = (/** @type {?} */ (element)).parentElement);\n        return false;\n    }\n    /**\n     * Sets up the global scroll listeners.\n     * @private\n     * @return {?}\n     */\n    _addGlobalListener() {\n        this._globalSubscription = this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            return fromEvent(window.document, 'scroll').subscribe((/**\n             * @return {?}\n             */\n            () => this._scrolled.next()));\n        }));\n    }\n    /**\n     * Cleans up the global scroll listener.\n     * @private\n     * @return {?}\n     */\n    _removeGlobalListener() {\n        if (this._globalSubscription) {\n            this._globalSubscription.unsubscribe();\n            this._globalSubscription = null;\n        }\n    }\n}\nScrollDispatcher.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] },\n];\n/** @nocollapse */\nScrollDispatcher.ctorParameters = () => [\n    { type: NgZone },\n    { type: Platform }\n];\n/** @nocollapse */ ScrollDispatcher.ngInjectableDef = ɵɵdefineInjectable({ factory: function ScrollDispatcher_Factory() { return new ScrollDispatcher(ɵɵinject(NgZone), ɵɵinject(Platform)); }, token: ScrollDispatcher, providedIn: \"root\" });\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentDispatcher\n * @param {?} ngZone\n * @param {?} platform\n * @return {?}\n */\nfunction SCROLL_DISPATCHER_PROVIDER_FACTORY(parentDispatcher, ngZone, platform) {\n    return parentDispatcher || new ScrollDispatcher(ngZone, platform);\n}\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @type {?}\n */\nconst SCROLL_DISPATCHER_PROVIDER = {\n    // If there is already a ScrollDispatcher available, use that. Otherwise, provide a new one.\n    provide: ScrollDispatcher,\n    deps: [[new Optional(), new SkipSelf(), ScrollDispatcher], NgZone, Platform],\n    useFactory: SCROLL_DISPATCHER_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\nclass CdkScrollable {\n    /**\n     * @param {?} elementRef\n     * @param {?} scrollDispatcher\n     * @param {?} ngZone\n     * @param {?=} dir\n     */\n    constructor(elementRef, scrollDispatcher, ngZone, dir) {\n        this.elementRef = elementRef;\n        this.scrollDispatcher = scrollDispatcher;\n        this.ngZone = ngZone;\n        this.dir = dir;\n        this._destroyed = new Subject();\n        this._elementScrolled = new Observable((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        (observer) => this.ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => fromEvent(this.elementRef.nativeElement, 'scroll').pipe(takeUntil(this._destroyed))\n            .subscribe(observer)))));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this.scrollDispatcher.register(this);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.scrollDispatcher.deregister(this);\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Returns observable that emits when a scroll event is fired on the host element.\n     * @return {?}\n     */\n    elementScrolled() {\n        return this._elementScrolled;\n    }\n    /**\n     * Gets the ElementRef for the viewport.\n     * @return {?}\n     */\n    getElementRef() {\n        return this.elementRef;\n    }\n    /**\n     * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n     * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param {?} options specified the offsets to scroll to.\n     * @return {?}\n     */\n    scrollTo(options) {\n        /** @type {?} */\n        const el = this.elementRef.nativeElement;\n        /** @type {?} */\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        // Rewrite start & end offsets as right or left offsets.\n        options.left = options.left == null ? (isRtl ? options.end : options.start) : options.left;\n        options.right = options.right == null ? (isRtl ? options.start : options.end) : options.right;\n        // Rewrite the bottom offset as a top offset.\n        if (options.bottom != null) {\n            ((/** @type {?} */ (options))).top =\n                el.scrollHeight - el.clientHeight - options.bottom;\n        }\n        // Rewrite the right offset as a left offset.\n        if (isRtl && getRtlScrollAxisType() != RtlScrollAxisType.NORMAL) {\n            if (options.left != null) {\n                ((/** @type {?} */ (options))).right =\n                    el.scrollWidth - el.clientWidth - options.left;\n            }\n            if (getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {\n                options.left = options.right;\n            }\n            else if (getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {\n                options.left = options.right ? -options.right : options.right;\n            }\n        }\n        else {\n            if (options.right != null) {\n                ((/** @type {?} */ (options))).left =\n                    el.scrollWidth - el.clientWidth - options.right;\n            }\n        }\n        this._applyScrollToOptions(options);\n    }\n    /**\n     * @private\n     * @param {?} options\n     * @return {?}\n     */\n    _applyScrollToOptions(options) {\n        /** @type {?} */\n        const el = this.elementRef.nativeElement;\n        if (supportsScrollBehavior()) {\n            el.scrollTo(options);\n        }\n        else {\n            if (options.top != null) {\n                el.scrollTop = options.top;\n            }\n            if (options.left != null) {\n                el.scrollLeft = options.left;\n            }\n        }\n    }\n    /**\n     * Measures the scroll offset relative to the specified edge of the viewport. This method can be\n     * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\n     * about what scrollLeft means in RTL. The values returned by this method are normalized such that\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param {?} from The edge to measure from.\n     * @return {?}\n     */\n    measureScrollOffset(from) {\n        /** @type {?} */\n        const LEFT = 'left';\n        /** @type {?} */\n        const RIGHT = 'right';\n        /** @type {?} */\n        const el = this.elementRef.nativeElement;\n        if (from == 'top') {\n            return el.scrollTop;\n        }\n        if (from == 'bottom') {\n            return el.scrollHeight - el.clientHeight - el.scrollTop;\n        }\n        // Rewrite start & end as left or right offsets.\n        /** @type {?} */\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        if (from == 'start') {\n            from = isRtl ? RIGHT : LEFT;\n        }\n        else if (from == 'end') {\n            from = isRtl ? LEFT : RIGHT;\n        }\n        if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {\n            // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n            else {\n                return el.scrollLeft;\n            }\n        }\n        else if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {\n            // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft + el.scrollWidth - el.clientWidth;\n            }\n            else {\n                return -el.scrollLeft;\n            }\n        }\n        else {\n            // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and\n            // (scrollWidth - clientWidth) when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft;\n            }\n            else {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n        }\n    }\n}\nCdkScrollable.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdk-scrollable], [cdkScrollable]'\n            },] },\n];\n/** @nocollapse */\nCdkScrollable.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ScrollDispatcher },\n    { type: NgZone },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Checks if the given ranges are equal.\n * @param {?} r1\n * @param {?} r2\n * @return {?}\n */\nfunction rangesEqual(r1, r2) {\n    return r1.start == r2.start && r1.end == r2.end;\n}\n/**\n * Scheduler to be used for scroll events. Needs to fall back to\n * something that doesn't rely on requestAnimationFrame on environments\n * that don't support it (e.g. server-side rendering).\n * @type {?}\n */\nconst SCROLL_SCHEDULER = typeof requestAnimationFrame !== 'undefined' ? animationFrameScheduler : asapScheduler;\n/**\n * A viewport that virtualizes its scrolling with the help of `CdkVirtualForOf`.\n */\nclass CdkVirtualScrollViewport extends CdkScrollable {\n    /**\n     * @param {?} elementRef\n     * @param {?} _changeDetectorRef\n     * @param {?} ngZone\n     * @param {?} _scrollStrategy\n     * @param {?} dir\n     * @param {?} scrollDispatcher\n     */\n    constructor(elementRef, _changeDetectorRef, ngZone, _scrollStrategy, dir, scrollDispatcher) {\n        super(elementRef, scrollDispatcher, ngZone, dir);\n        this.elementRef = elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._scrollStrategy = _scrollStrategy;\n        /**\n         * Emits when the viewport is detached from a CdkVirtualForOf.\n         */\n        this._detachedSubject = new Subject();\n        /**\n         * Emits when the rendered range changes.\n         */\n        this._renderedRangeSubject = new Subject();\n        this._orientation = 'vertical';\n        // Note: we don't use the typical EventEmitter here because we need to subscribe to the scroll\n        // strategy lazily (i.e. only if the user is actually listening to the events). We do this because\n        // depending on how the strategy calculates the scrolled index, it may come at a cost to\n        // performance.\n        /**\n         * Emits when the index of the first element visible in the viewport changes.\n         */\n        this.scrolledIndexChange = new Observable((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        (observer) => this._scrollStrategy.scrolledIndexChange.subscribe((/**\n         * @param {?} index\n         * @return {?}\n         */\n        index => Promise.resolve().then((/**\n         * @return {?}\n         */\n        () => this.ngZone.run((/**\n         * @return {?}\n         */\n        () => observer.next(index)))))))));\n        /**\n         * A stream that emits whenever the rendered range changes.\n         */\n        this.renderedRangeStream = this._renderedRangeSubject.asObservable();\n        /**\n         * The total size of all content (in pixels), including content that is not currently rendered.\n         */\n        this._totalContentSize = 0;\n        /**\n         * A string representing the `style.width` property value to be used for the spacer element.\n         */\n        this._totalContentWidth = '';\n        /**\n         * A string representing the `style.height` property value to be used for the spacer element.\n         */\n        this._totalContentHeight = '';\n        /**\n         * The currently rendered range of indices.\n         */\n        this._renderedRange = { start: 0, end: 0 };\n        /**\n         * The length of the data bound to this viewport (in number of items).\n         */\n        this._dataLength = 0;\n        /**\n         * The size of the viewport (in pixels).\n         */\n        this._viewportSize = 0;\n        /**\n         * The last rendered content offset that was set.\n         */\n        this._renderedContentOffset = 0;\n        /**\n         * Whether the last rendered content offset was to the end of the content (and therefore needs to\n         * be rewritten as an offset to the start of the content).\n         */\n        this._renderedContentOffsetNeedsRewrite = false;\n        /**\n         * Whether there is a pending change detection cycle.\n         */\n        this._isChangeDetectionPending = false;\n        /**\n         * A list of functions to run after the next change detection cycle.\n         */\n        this._runAfterChangeDetection = [];\n        if (!_scrollStrategy) {\n            throw Error('Error: cdk-virtual-scroll-viewport requires the \"itemSize\" property to be set.');\n        }\n    }\n    /**\n     * The direction the viewport scrolls.\n     * @return {?}\n     */\n    get orientation() {\n        return this._orientation;\n    }\n    /**\n     * @param {?} orientation\n     * @return {?}\n     */\n    set orientation(orientation) {\n        if (this._orientation !== orientation) {\n            this._orientation = orientation;\n            this._calculateSpacerSize();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        super.ngOnInit();\n        // It's still too early to measure the viewport at this point. Deferring with a promise allows\n        // the Viewport to be rendered with the correct size before we measure. We run this outside the\n        // zone to avoid causing more change detection cycles. We handle the change detection loop\n        // ourselves instead.\n        this.ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => Promise.resolve().then((/**\n         * @return {?}\n         */\n        () => {\n            this._measureViewportSize();\n            this._scrollStrategy.attach(this);\n            this.elementScrolled()\n                .pipe(\n            // Start off with a fake scroll event so we properly detect our initial position.\n            startWith((/** @type {?} */ (null))), \n            // Collect multiple events into one until the next animation frame. This way if\n            // there are multiple scroll events in the same frame we only need to recheck\n            // our layout once.\n            auditTime(0, SCROLL_SCHEDULER))\n                .subscribe((/**\n             * @return {?}\n             */\n            () => this._scrollStrategy.onContentScrolled()));\n            this._markChangeDetectionNeeded();\n        }))));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.detach();\n        this._scrollStrategy.detach();\n        // Complete all subjects\n        this._renderedRangeSubject.complete();\n        this._detachedSubject.complete();\n        super.ngOnDestroy();\n    }\n    /**\n     * Attaches a `CdkVirtualForOf` to this viewport.\n     * @param {?} forOf\n     * @return {?}\n     */\n    attach(forOf) {\n        if (this._forOf) {\n            throw Error('CdkVirtualScrollViewport is already attached.');\n        }\n        // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length\n        // changes. Run outside the zone to avoid triggering change detection, since we're managing the\n        // change detection loop ourselves.\n        this.ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            this._forOf = forOf;\n            this._forOf.dataStream.pipe(takeUntil(this._detachedSubject)).subscribe((/**\n             * @param {?} data\n             * @return {?}\n             */\n            data => {\n                /** @type {?} */\n                const newLength = data.length;\n                if (newLength !== this._dataLength) {\n                    this._dataLength = newLength;\n                    this._scrollStrategy.onDataLengthChanged();\n                }\n                this._doChangeDetection();\n            }));\n        }));\n    }\n    /**\n     * Detaches the current `CdkVirtualForOf`.\n     * @return {?}\n     */\n    detach() {\n        this._forOf = null;\n        this._detachedSubject.next();\n    }\n    /**\n     * Gets the length of the data bound to this viewport (in number of items).\n     * @return {?}\n     */\n    getDataLength() {\n        return this._dataLength;\n    }\n    /**\n     * Gets the size of the viewport (in pixels).\n     * @return {?}\n     */\n    getViewportSize() {\n        return this._viewportSize;\n    }\n    // TODO(mmalerba): This is technically out of sync with what's really rendered until a render\n    // cycle happens. I'm being careful to only call it after the render cycle is complete and before\n    // setting it to something else, but its error prone and should probably be split into\n    // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.\n    /**\n     * Get the current rendered range of items.\n     * @return {?}\n     */\n    getRenderedRange() {\n        return this._renderedRange;\n    }\n    /**\n     * Sets the total size of all content (in pixels), including content that is not currently\n     * rendered.\n     * @param {?} size\n     * @return {?}\n     */\n    setTotalContentSize(size) {\n        if (this._totalContentSize !== size) {\n            this._totalContentSize = size;\n            this._calculateSpacerSize();\n            this._markChangeDetectionNeeded();\n        }\n    }\n    /**\n     * Sets the currently rendered range of indices.\n     * @param {?} range\n     * @return {?}\n     */\n    setRenderedRange(range) {\n        if (!rangesEqual(this._renderedRange, range)) {\n            this._renderedRangeSubject.next(this._renderedRange = range);\n            this._markChangeDetectionNeeded((/**\n             * @return {?}\n             */\n            () => this._scrollStrategy.onContentRendered()));\n        }\n    }\n    /**\n     * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\n     * @return {?}\n     */\n    getOffsetToRenderedContentStart() {\n        return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;\n    }\n    /**\n     * Sets the offset from the start of the viewport to either the start or end of the rendered data\n     * (in pixels).\n     * @param {?} offset\n     * @param {?=} to\n     * @return {?}\n     */\n    setRenderedContentOffset(offset, to = 'to-start') {\n        // For a horizontal viewport in a right-to-left language we need to translate along the x-axis\n        // in the negative direction.\n        /** @type {?} */\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        /** @type {?} */\n        const isHorizontal = this.orientation == 'horizontal';\n        /** @type {?} */\n        const axis = isHorizontal ? 'X' : 'Y';\n        /** @type {?} */\n        const axisDirection = isHorizontal && isRtl ? -1 : 1;\n        /** @type {?} */\n        let transform = `translate${axis}(${Number(axisDirection * offset)}px)`;\n        this._renderedContentOffset = offset;\n        if (to === 'to-end') {\n            transform += ` translate${axis}(-100%)`;\n            // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise\n            // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would\n            // expand upward).\n            this._renderedContentOffsetNeedsRewrite = true;\n        }\n        if (this._renderedContentTransform != transform) {\n            // We know this value is safe because we parse `offset` with `Number()` before passing it\n            // into the string.\n            this._renderedContentTransform = transform;\n            this._markChangeDetectionNeeded((/**\n             * @return {?}\n             */\n            () => {\n                if (this._renderedContentOffsetNeedsRewrite) {\n                    this._renderedContentOffset -= this.measureRenderedContentSize();\n                    this._renderedContentOffsetNeedsRewrite = false;\n                    this.setRenderedContentOffset(this._renderedContentOffset);\n                }\n                else {\n                    this._scrollStrategy.onRenderedOffsetChanged();\n                }\n            }));\n        }\n    }\n    /**\n     * Scrolls to the given offset from the start of the viewport. Please note that this is not always\n     * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left\n     * direction, this would be the equivalent of setting a fictional `scrollRight` property.\n     * @param {?} offset The offset to scroll to.\n     * @param {?=} behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     * @return {?}\n     */\n    scrollToOffset(offset, behavior = 'auto') {\n        /** @type {?} */\n        const options = { behavior };\n        if (this.orientation === 'horizontal') {\n            options.start = offset;\n        }\n        else {\n            options.top = offset;\n        }\n        this.scrollTo(options);\n    }\n    /**\n     * Scrolls to the offset for the given index.\n     * @param {?} index The index of the element to scroll to.\n     * @param {?=} behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     * @return {?}\n     */\n    scrollToIndex(index, behavior = 'auto') {\n        this._scrollStrategy.scrollToIndex(index, behavior);\n    }\n    /**\n     * Gets the current scroll offset from the start of the viewport (in pixels).\n     * @param {?=} from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'\n     *     in horizontal mode.\n     * @return {?}\n     */\n    measureScrollOffset(from) {\n        return super.measureScrollOffset(from ? from : this.orientation === 'horizontal' ? 'start' : 'top');\n    }\n    /**\n     * Measure the combined size of all of the rendered items.\n     * @return {?}\n     */\n    measureRenderedContentSize() {\n        /** @type {?} */\n        const contentEl = this._contentWrapper.nativeElement;\n        return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;\n    }\n    /**\n     * Measure the total combined size of the given range. Throws if the range includes items that are\n     * not rendered.\n     * @param {?} range\n     * @return {?}\n     */\n    measureRangeSize(range) {\n        if (!this._forOf) {\n            return 0;\n        }\n        return this._forOf.measureRangeSize(range, this.orientation);\n    }\n    /**\n     * Update the viewport dimensions and re-render.\n     * @return {?}\n     */\n    checkViewportSize() {\n        // TODO: Cleanup later when add logic for handling content resize\n        this._measureViewportSize();\n        this._scrollStrategy.onDataLengthChanged();\n    }\n    /**\n     * Measure the viewport size.\n     * @private\n     * @return {?}\n     */\n    _measureViewportSize() {\n        /** @type {?} */\n        const viewportEl = this.elementRef.nativeElement;\n        this._viewportSize = this.orientation === 'horizontal' ?\n            viewportEl.clientWidth : viewportEl.clientHeight;\n    }\n    /**\n     * Queue up change detection to run.\n     * @private\n     * @param {?=} runAfter\n     * @return {?}\n     */\n    _markChangeDetectionNeeded(runAfter) {\n        if (runAfter) {\n            this._runAfterChangeDetection.push(runAfter);\n        }\n        // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of\n        // properties sequentially we only have to run `_doChangeDetection` once at the end.\n        if (!this._isChangeDetectionPending) {\n            this._isChangeDetectionPending = true;\n            this.ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => Promise.resolve().then((/**\n             * @return {?}\n             */\n            () => {\n                this._doChangeDetection();\n            }))));\n        }\n    }\n    /**\n     * Run change detection.\n     * @private\n     * @return {?}\n     */\n    _doChangeDetection() {\n        this._isChangeDetectionPending = false;\n        // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection\n        // from the root, since the repeated items are content projected in. Calling `detectChanges`\n        // instead does not properly check the projected content.\n        this.ngZone.run((/**\n         * @return {?}\n         */\n        () => this._changeDetectorRef.markForCheck()));\n        // Apply the content transform. The transform can't be set via an Angular binding because\n        // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of\n        // string literals, a variable that can only be 'X' or 'Y', and user input that is run through\n        // the `Number` function first to coerce it to a numeric value.\n        this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform;\n        /** @type {?} */\n        const runAfterChangeDetection = this._runAfterChangeDetection;\n        this._runAfterChangeDetection = [];\n        for (const fn of runAfterChangeDetection) {\n            fn();\n        }\n    }\n    /**\n     * Calculates the `style.width` and `style.height` for the spacer element.\n     * @private\n     * @return {?}\n     */\n    _calculateSpacerSize() {\n        this._totalContentHeight =\n            this.orientation === 'horizontal' ? '' : `${this._totalContentSize}px`;\n        this._totalContentWidth =\n            this.orientation === 'horizontal' ? `${this._totalContentSize}px` : '';\n    }\n}\nCdkVirtualScrollViewport.decorators = [\n    { type: Component, args: [{selector: 'cdk-virtual-scroll-viewport',\n                template: \"<div #contentWrapper class=\\\"cdk-virtual-scroll-content-wrapper\\\"><ng-content></ng-content></div><div class=\\\"cdk-virtual-scroll-spacer\\\" [style.width]=\\\"_totalContentWidth\\\" [style.height]=\\\"_totalContentHeight\\\"></div>\",\n                styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;overflow:auto;contain:strict;transform:translateZ(0);will-change:scroll-position;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:0}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:0}.cdk-virtual-scroll-spacer{position:absolute;top:0;left:0;height:1px;width:1px;transform-origin:0 0}[dir=rtl] .cdk-virtual-scroll-spacer{right:0;left:auto;transform-origin:100% 0}\"],\n                host: {\n                    'class': 'cdk-virtual-scroll-viewport',\n                    '[class.cdk-virtual-scroll-orientation-horizontal]': 'orientation === \"horizontal\"',\n                    '[class.cdk-virtual-scroll-orientation-vertical]': 'orientation !== \"horizontal\"',\n                },\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                providers: [{\n                        provide: CdkScrollable,\n                        useExisting: CdkVirtualScrollViewport,\n                    }]\n            },] },\n];\n/** @nocollapse */\nCdkVirtualScrollViewport.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [VIRTUAL_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: ScrollDispatcher }\n];\nCdkVirtualScrollViewport.propDecorators = {\n    orientation: [{ type: Input }],\n    scrolledIndexChange: [{ type: Output }],\n    _contentWrapper: [{ type: ViewChild, args: ['contentWrapper', { static: true },] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Helper to extract size from a DOM Node.\n * @param {?} orientation\n * @param {?} node\n * @return {?}\n */\nfunction getSize(orientation, node) {\n    /** @type {?} */\n    const el = (/** @type {?} */ (node));\n    if (!el.getBoundingClientRect) {\n        return 0;\n    }\n    /** @type {?} */\n    const rect = el.getBoundingClientRect();\n    return orientation == 'horizontal' ? rect.width : rect.height;\n}\n/**\n * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\n * container.\n * @template T\n */\nclass CdkVirtualForOf {\n    /**\n     * @param {?} _viewContainerRef\n     * @param {?} _template\n     * @param {?} _differs\n     * @param {?} _viewport\n     * @param {?} ngZone\n     */\n    constructor(_viewContainerRef, _template, _differs, _viewport, ngZone) {\n        this._viewContainerRef = _viewContainerRef;\n        this._template = _template;\n        this._differs = _differs;\n        this._viewport = _viewport;\n        /**\n         * Emits when the rendered view of the data changes.\n         */\n        this.viewChange = new Subject();\n        /**\n         * Subject that emits when a new DataSource instance is given.\n         */\n        this._dataSourceChanges = new Subject();\n        /**\n         * The size of the cache used to store templates that are not being used for re-use later.\n         * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n         */\n        this.cdkVirtualForTemplateCacheSize = 20;\n        /**\n         * Emits whenever the data in the current DataSource changes.\n         */\n        this.dataStream = this._dataSourceChanges\n            .pipe(\n        // Start off with null `DataSource`.\n        startWith((/** @type {?} */ (null))), \n        // Bundle up the previous and current data sources so we can work with both.\n        pairwise(), \n        // Use `_changeDataSource` to disconnect from the previous data source and connect to the\n        // new one, passing back a stream of data changes which we run through `switchMap` to give\n        // us a data stream that emits the latest data from whatever the current `DataSource` is.\n        switchMap((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ([prev, cur]) => this._changeDataSource(prev, cur))), \n        // Replay the last emitted data when someone subscribes.\n        shareReplay(1));\n        /**\n         * The differ used to calculate changes to the data.\n         */\n        this._differ = null;\n        /**\n         * The template cache used to hold on ot template instancess that have been stamped out, but don't\n         * currently need to be rendered. These instances will be reused in the future rather than\n         * stamping out brand new ones.\n         */\n        this._templateCache = [];\n        /**\n         * Whether the rendered data should be updated during the next ngDoCheck cycle.\n         */\n        this._needsUpdate = false;\n        this._destroyed = new Subject();\n        this.dataStream.subscribe((/**\n         * @param {?} data\n         * @return {?}\n         */\n        data => {\n            this._data = data;\n            this._onRenderedDataChange();\n        }));\n        this._viewport.renderedRangeStream.pipe(takeUntil(this._destroyed)).subscribe((/**\n         * @param {?} range\n         * @return {?}\n         */\n        range => {\n            this._renderedRange = range;\n            ngZone.run((/**\n             * @return {?}\n             */\n            () => this.viewChange.next(this._renderedRange)));\n            this._onRenderedDataChange();\n        }));\n        this._viewport.attach(this);\n    }\n    /**\n     * The DataSource to display.\n     * @return {?}\n     */\n    get cdkVirtualForOf() {\n        return this._cdkVirtualForOf;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set cdkVirtualForOf(value) {\n        this._cdkVirtualForOf = value;\n        /** @type {?} */\n        const ds = isDataSource(value) ? value :\n            // Slice the value if its an NgIterable to ensure we're working with an array.\n            new ArrayDataSource(value instanceof Observable ? value : Array.prototype.slice.call(value || []));\n        this._dataSourceChanges.next(ds);\n    }\n    /**\n     * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\n     * the item and produces a value to be used as the item's identity when tracking changes.\n     * @return {?}\n     */\n    get cdkVirtualForTrackBy() {\n        return this._cdkVirtualForTrackBy;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    set cdkVirtualForTrackBy(fn) {\n        this._needsUpdate = true;\n        this._cdkVirtualForTrackBy = fn ?\n            (/**\n             * @param {?} index\n             * @param {?} item\n             * @return {?}\n             */\n            (index, item) => fn(index + (this._renderedRange ? this._renderedRange.start : 0), item)) :\n            undefined;\n    }\n    /**\n     * The template used to stamp out new elements.\n     * @param {?} value\n     * @return {?}\n     */\n    set cdkVirtualForTemplate(value) {\n        if (value) {\n            this._needsUpdate = true;\n            this._template = value;\n        }\n    }\n    /**\n     * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n     * in the specified range. Throws an error if the range includes items that are not currently\n     * rendered.\n     * @param {?} range\n     * @param {?} orientation\n     * @return {?}\n     */\n    measureRangeSize(range, orientation) {\n        if (range.start >= range.end) {\n            return 0;\n        }\n        if (range.start < this._renderedRange.start || range.end > this._renderedRange.end) {\n            throw Error(`Error: attempted to measure an item that isn't rendered.`);\n        }\n        // The index into the list of rendered views for the first item in the range.\n        /** @type {?} */\n        const renderedStartIndex = range.start - this._renderedRange.start;\n        // The length of the range we're measuring.\n        /** @type {?} */\n        const rangeLen = range.end - range.start;\n        // Loop over all root nodes for all items in the range and sum up their size.\n        /** @type {?} */\n        let totalSize = 0;\n        /** @type {?} */\n        let i = rangeLen;\n        while (i--) {\n            /** @type {?} */\n            const view = (/** @type {?} */ (this._viewContainerRef.get(i + renderedStartIndex)));\n            /** @type {?} */\n            let j = view ? view.rootNodes.length : 0;\n            while (j--) {\n                totalSize += getSize(orientation, (/** @type {?} */ (view)).rootNodes[j]);\n            }\n        }\n        return totalSize;\n    }\n    /**\n     * @return {?}\n     */\n    ngDoCheck() {\n        if (this._differ && this._needsUpdate) {\n            // TODO(mmalerba): We should differentiate needs update due to scrolling and a new portion of\n            // this list being rendered (can use simpler algorithm) vs needs update due to data actually\n            // changing (need to do this diff).\n            /** @type {?} */\n            const changes = this._differ.diff(this._renderedItems);\n            if (!changes) {\n                this._updateContext();\n            }\n            else {\n                this._applyChanges(changes);\n            }\n            this._needsUpdate = false;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._viewport.detach();\n        this._dataSourceChanges.next();\n        this._dataSourceChanges.complete();\n        this.viewChange.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n        for (let view of this._templateCache) {\n            view.destroy();\n        }\n    }\n    /**\n     * React to scroll state changes in the viewport.\n     * @private\n     * @return {?}\n     */\n    _onRenderedDataChange() {\n        if (!this._renderedRange) {\n            return;\n        }\n        this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\n        if (!this._differ) {\n            this._differ = this._differs.find(this._renderedItems).create(this.cdkVirtualForTrackBy);\n        }\n        this._needsUpdate = true;\n    }\n    /**\n     * Swap out one `DataSource` for another.\n     * @private\n     * @param {?} oldDs\n     * @param {?} newDs\n     * @return {?}\n     */\n    _changeDataSource(oldDs, newDs) {\n        if (oldDs) {\n            oldDs.disconnect(this);\n        }\n        this._needsUpdate = true;\n        return newDs ? newDs.connect(this) : of();\n    }\n    /**\n     * Update the `CdkVirtualForOfContext` for all views.\n     * @private\n     * @return {?}\n     */\n    _updateContext() {\n        /** @type {?} */\n        const count = this._data.length;\n        /** @type {?} */\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            /** @type {?} */\n            let view = (/** @type {?} */ (this._viewContainerRef.get(i)));\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n            view.detectChanges();\n        }\n    }\n    /**\n     * Apply changes to the DOM.\n     * @private\n     * @param {?} changes\n     * @return {?}\n     */\n    _applyChanges(changes) {\n        // Rearrange the views to put them in the right location.\n        changes.forEachOperation((/**\n         * @param {?} record\n         * @param {?} adjustedPreviousIndex\n         * @param {?} currentIndex\n         * @return {?}\n         */\n        (record, adjustedPreviousIndex, currentIndex) => {\n            if (record.previousIndex == null) { // Item added.\n                // Item added.\n                /** @type {?} */\n                const view = this._insertViewForNewItem((/** @type {?} */ (currentIndex)));\n                view.context.$implicit = record.item;\n            }\n            else if (currentIndex == null) { // Item removed.\n                this._cacheView(this._detachView((/** @type {?} */ (adjustedPreviousIndex))));\n            }\n            else { // Item moved.\n                // Item moved.\n                /** @type {?} */\n                const view = (/** @type {?} */ (this._viewContainerRef.get((/** @type {?} */ (adjustedPreviousIndex)))));\n                this._viewContainerRef.move(view, currentIndex);\n                view.context.$implicit = record.item;\n            }\n        }));\n        // Update $implicit for any items that had an identity change.\n        changes.forEachIdentityChange((/**\n         * @param {?} record\n         * @return {?}\n         */\n        (record) => {\n            /** @type {?} */\n            const view = (/** @type {?} */ (this._viewContainerRef.get((/** @type {?} */ (record.currentIndex)))));\n            view.context.$implicit = record.item;\n        }));\n        // Update the context variables on all items.\n        /** @type {?} */\n        const count = this._data.length;\n        /** @type {?} */\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            /** @type {?} */\n            const view = (/** @type {?} */ (this._viewContainerRef.get(i)));\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n        }\n    }\n    /**\n     * Cache the given detached view.\n     * @private\n     * @param {?} view\n     * @return {?}\n     */\n    _cacheView(view) {\n        if (this._templateCache.length < this.cdkVirtualForTemplateCacheSize) {\n            this._templateCache.push(view);\n        }\n        else {\n            /** @type {?} */\n            const index = this._viewContainerRef.indexOf(view);\n            // It's very unlikely that the index will ever be -1, but just in case,\n            // destroy the view on its own, otherwise destroy it through the\n            // container to ensure that all the references are removed.\n            if (index === -1) {\n                view.destroy();\n            }\n            else {\n                this._viewContainerRef.remove(index);\n            }\n        }\n    }\n    /**\n     * Inserts a view for a new item, either from the cache or by creating a new one.\n     * @private\n     * @param {?} index\n     * @return {?}\n     */\n    _insertViewForNewItem(index) {\n        return this._insertViewFromCache(index) || this._createEmbeddedViewAt(index);\n    }\n    /**\n     * Update the computed properties on the `CdkVirtualForOfContext`.\n     * @private\n     * @param {?} context\n     * @return {?}\n     */\n    _updateComputedContextProperties(context) {\n        context.first = context.index === 0;\n        context.last = context.index === context.count - 1;\n        context.even = context.index % 2 === 0;\n        context.odd = !context.even;\n    }\n    /**\n     * Creates a new embedded view and moves it to the given index\n     * @private\n     * @param {?} index\n     * @return {?}\n     */\n    _createEmbeddedViewAt(index) {\n        // Note that it's important that we insert the item directly at the proper index,\n        // rather than inserting it and the moving it in place, because if there's a directive\n        // on the same node that injects the `ViewContainerRef`, Angular will insert another\n        // comment node which can throw off the move when it's being repeated for all items.\n        return this._viewContainerRef.createEmbeddedView(this._template, {\n            $implicit: (/** @type {?} */ (null)),\n            cdkVirtualForOf: this._cdkVirtualForOf,\n            index: -1,\n            count: -1,\n            first: false,\n            last: false,\n            odd: false,\n            even: false\n        }, index);\n    }\n    /**\n     * Inserts a recycled view from the cache at the given index.\n     * @private\n     * @param {?} index\n     * @return {?}\n     */\n    _insertViewFromCache(index) {\n        /** @type {?} */\n        const cachedView = this._templateCache.pop();\n        if (cachedView) {\n            this._viewContainerRef.insert(cachedView, index);\n        }\n        return cachedView || null;\n    }\n    /**\n     * Detaches the embedded view at the given index.\n     * @private\n     * @param {?} index\n     * @return {?}\n     */\n    _detachView(index) {\n        return (/** @type {?} */ (this._viewContainerRef.detach(index)));\n    }\n}\nCdkVirtualForOf.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkVirtualFor][cdkVirtualForOf]',\n            },] },\n];\n/** @nocollapse */\nCdkVirtualForOf.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: TemplateRef },\n    { type: IterableDiffers },\n    { type: CdkVirtualScrollViewport, decorators: [{ type: SkipSelf }] },\n    { type: NgZone }\n];\nCdkVirtualForOf.propDecorators = {\n    cdkVirtualForOf: [{ type: Input }],\n    cdkVirtualForTrackBy: [{ type: Input }],\n    cdkVirtualForTemplate: [{ type: Input }],\n    cdkVirtualForTemplateCacheSize: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ScrollingModule {\n}\nScrollingModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [BidiModule, PlatformModule],\n                exports: [\n                    BidiModule,\n                    CdkFixedSizeVirtualScroll,\n                    CdkScrollable,\n                    CdkVirtualForOf,\n                    CdkVirtualScrollViewport,\n                ],\n                declarations: [\n                    CdkFixedSizeVirtualScroll,\n                    CdkScrollable,\n                    CdkVirtualForOf,\n                    CdkVirtualScrollViewport,\n                ],\n            },] },\n];\n/**\n * @deprecated ScrollDispatchModule has been renamed to ScrollingModule.\n * \\@breaking-change 8.0.0 delete this alias\n */\nclass ScrollDispatchModule {\n}\nScrollDispatchModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [ScrollingModule],\n                exports: [ScrollingModule],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Time in ms to throttle the resize events by default.\n * @type {?}\n */\nconst DEFAULT_RESIZE_TIME = 20;\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * \\@docs-private\n */\nclass ViewportRuler {\n    /**\n     * @param {?} _platform\n     * @param {?} ngZone\n     */\n    constructor(_platform, ngZone) {\n        this._platform = _platform;\n        ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            this._change = _platform.isBrowser ?\n                merge(fromEvent(window, 'resize'), fromEvent(window, 'orientationchange')) :\n                of();\n            // Note that we need to do the subscription inside `runOutsideAngular`\n            // since subscribing is what causes the event listener to be added.\n            this._invalidateCache = this.change().subscribe((/**\n             * @return {?}\n             */\n            () => this._updateViewportSize()));\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._invalidateCache.unsubscribe();\n    }\n    /**\n     * Returns the viewport's width and height.\n     * @return {?}\n     */\n    getViewportSize() {\n        if (!this._viewportSize) {\n            this._updateViewportSize();\n        }\n        /** @type {?} */\n        const output = { width: this._viewportSize.width, height: this._viewportSize.height };\n        // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n        if (!this._platform.isBrowser) {\n            this._viewportSize = (/** @type {?} */ (null));\n        }\n        return output;\n    }\n    /**\n     * Gets a ClientRect for the viewport's bounds.\n     * @return {?}\n     */\n    getViewportRect() {\n        // Use the document element's bounding rect rather than the window scroll properties\n        // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n        // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n        // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n        // can disagree when the page is pinch-zoomed (on devices that support touch).\n        // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n        // We use the documentElement instead of the body because, by default (without a css reset)\n        // browsers typically give the document body an 8px margin, which is not included in\n        // getBoundingClientRect().\n        /** @type {?} */\n        const scrollPosition = this.getViewportScrollPosition();\n        const { width, height } = this.getViewportSize();\n        return {\n            top: scrollPosition.top,\n            left: scrollPosition.left,\n            bottom: scrollPosition.top + height,\n            right: scrollPosition.left + width,\n            height,\n            width,\n        };\n    }\n    /**\n     * Gets the (top, left) scroll position of the viewport.\n     * @return {?}\n     */\n    getViewportScrollPosition() {\n        // While we can get a reference to the fake document\n        // during SSR, it doesn't have getBoundingClientRect.\n        if (!this._platform.isBrowser) {\n            return { top: 0, left: 0 };\n        }\n        // The top-left-corner of the viewport is determined by the scroll position of the document\n        // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n        // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n        // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n        // `document.documentElement` works consistently, where the `top` and `left` values will\n        // equal negative the scroll position.\n        /** @type {?} */\n        const documentElement = (/** @type {?} */ (document.documentElement));\n        /** @type {?} */\n        const documentRect = documentElement.getBoundingClientRect();\n        /** @type {?} */\n        const top = -documentRect.top || document.body.scrollTop || window.scrollY ||\n            documentElement.scrollTop || 0;\n        /** @type {?} */\n        const left = -documentRect.left || document.body.scrollLeft || window.scrollX ||\n            documentElement.scrollLeft || 0;\n        return { top, left };\n    }\n    /**\n     * Returns a stream that emits whenever the size of the viewport changes.\n     * @param {?=} throttleTime Time in milliseconds to throttle the stream.\n     * @return {?}\n     */\n    change(throttleTime = DEFAULT_RESIZE_TIME) {\n        return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\n    }\n    /**\n     * Updates the cached viewport size.\n     * @private\n     * @return {?}\n     */\n    _updateViewportSize() {\n        this._viewportSize = this._platform.isBrowser ?\n            { width: window.innerWidth, height: window.innerHeight } :\n            { width: 0, height: 0 };\n    }\n}\nViewportRuler.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] },\n];\n/** @nocollapse */\nViewportRuler.ctorParameters = () => [\n    { type: Platform },\n    { type: NgZone }\n];\n/** @nocollapse */ ViewportRuler.ngInjectableDef = ɵɵdefineInjectable({ factory: function ViewportRuler_Factory() { return new ViewportRuler(ɵɵinject(Platform), ɵɵinject(NgZone)); }, token: ViewportRuler, providedIn: \"root\" });\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentRuler\n * @param {?} platform\n * @param {?} ngZone\n * @return {?}\n */\nfunction VIEWPORT_RULER_PROVIDER_FACTORY(parentRuler, platform, ngZone) {\n    return parentRuler || new ViewportRuler(platform, ngZone);\n}\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @type {?}\n */\nconst VIEWPORT_RULER_PROVIDER = {\n    // If there is already a ViewportRuler available, use that. Otherwise, provide a new one.\n    provide: ViewportRuler,\n    deps: [[new Optional(), new SkipSelf(), ViewportRuler], Platform, NgZone],\n    useFactory: VIEWPORT_RULER_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { _fixedSizeVirtualScrollStrategyFactory, FixedSizeVirtualScrollStrategy, CdkFixedSizeVirtualScroll, SCROLL_DISPATCHER_PROVIDER_FACTORY, DEFAULT_SCROLL_TIME, ScrollDispatcher, SCROLL_DISPATCHER_PROVIDER, CdkScrollable, ScrollingModule, ScrollDispatchModule, VIEWPORT_RULER_PROVIDER_FACTORY, DEFAULT_RESIZE_TIME, ViewportRuler, VIEWPORT_RULER_PROVIDER, CdkVirtualForOf, VIRTUAL_SCROLL_STRATEGY, CdkVirtualScrollViewport };\n//# sourceMappingURL=scrolling.js.map\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Version, NgModule, InjectionToken, Optional, Inject, isDevMode, inject, LOCALE_ID, Injectable, Directive, ElementRef, Input, NgZone, Component, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, EventEmitter, Output, ɵɵdefineInjectable } from '@angular/core';\nimport { HAMMER_LOADER, HammerGestureConfig } from '@angular/platform-browser';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport { VERSION } from '@angular/cdk';\nimport { coerceBooleanProperty, coerceElement } from '@angular/cdk/coercion';\nimport { Subject, Observable } from 'rxjs';\nimport { Platform, PlatformModule, normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { startWith } from 'rxjs/operators';\nimport { isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { ENTER, SPACE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Current version of Angular Material.\n * @type {?}\n */\nconst VERSION$1 = new Version('8.2.3');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * \\@docs-private\n */\nclass AnimationCurves {\n}\nAnimationCurves.STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\nAnimationCurves.DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\nAnimationCurves.ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\nAnimationCurves.SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n/**\n * \\@docs-private\n */\nclass AnimationDurations {\n}\nAnimationDurations.COMPLEX = '375ms';\nAnimationDurations.ENTERING = '225ms';\nAnimationDurations.EXITING = '195ms';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Private version constant to circumvent test/build issues,\n// i.e. avoid core to depend on the @angular/material primary entry-point\n// Can be removed once the Material primary entry-point no longer\n// re-exports all secondary entry-points\n/** @type {?} */\nconst VERSION$2 = new Version('8.2.3');\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MATERIAL_SANITY_CHECKS_FACTORY() {\n    return true;\n}\n/**\n * Injection token that configures whether the Material sanity checks are enabled.\n * @type {?}\n */\nconst MATERIAL_SANITY_CHECKS = new InjectionToken('mat-sanity-checks', {\n    providedIn: 'root',\n    factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\nclass MatCommonModule {\n    /**\n     * @param {?} _sanityChecksEnabled\n     * @param {?=} _hammerLoader\n     */\n    constructor(_sanityChecksEnabled, _hammerLoader) {\n        this._sanityChecksEnabled = _sanityChecksEnabled;\n        this._hammerLoader = _hammerLoader;\n        /**\n         * Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n         */\n        this._hasDoneGlobalChecks = false;\n        /**\n         * Whether we've already checked for HammerJs availability.\n         */\n        this._hasCheckedHammer = false;\n        /**\n         * Reference to the global `document` object.\n         */\n        this._document = typeof document === 'object' && document ? document : null;\n        /**\n         * Reference to the global 'window' object.\n         */\n        this._window = typeof window === 'object' && window ? window : null;\n        if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n            this._checkDoctypeIsDefined();\n            this._checkThemeIsPresent();\n            this._checkCdkVersionMatch();\n            this._hasDoneGlobalChecks = true;\n        }\n    }\n    /**\n     * Whether any sanity checks are enabled\n     * @private\n     * @return {?}\n     */\n    _areChecksEnabled() {\n        return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n    }\n    /**\n     * Whether the code is running in tests.\n     * @private\n     * @return {?}\n     */\n    _isTestEnv() {\n        /** @type {?} */\n        const window = (/** @type {?} */ (this._window));\n        return window && (window.__karma__ || window.jasmine);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _checkDoctypeIsDefined() {\n        if (this._document && !this._document.doctype) {\n            console.warn('Current document does not have a doctype. This may cause ' +\n                'some Angular Material components not to behave as expected.');\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _checkThemeIsPresent() {\n        // We need to assert that the `body` is defined, because these checks run very early\n        // and the `body` won't be defined if the consumer put their scripts in the `head`.\n        if (!this._document || !this._document.body || typeof getComputedStyle !== 'function') {\n            return;\n        }\n        /** @type {?} */\n        const testElement = this._document.createElement('div');\n        testElement.classList.add('mat-theme-loaded-marker');\n        this._document.body.appendChild(testElement);\n        /** @type {?} */\n        const computedStyle = getComputedStyle(testElement);\n        // In some situations the computed style of the test element can be null. For example in\n        // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n        // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n        if (computedStyle && computedStyle.display !== 'none') {\n            console.warn('Could not find Angular Material core theme. Most Material ' +\n                'components may not work as expected. For more info refer ' +\n                'to the theming guide: https://material.angular.io/guide/theming');\n        }\n        this._document.body.removeChild(testElement);\n    }\n    /**\n     * Checks whether the material version matches the cdk version\n     * @private\n     * @return {?}\n     */\n    _checkCdkVersionMatch() {\n        if (VERSION$2.full !== VERSION.full) {\n            console.warn('The Angular Material version (' + VERSION$2.full + ') does not match ' +\n                'the Angular CDK version (' + VERSION.full + ').\\n' +\n                'Please ensure the versions of these two packages exactly match.');\n        }\n    }\n    /**\n     * Checks whether HammerJS is available.\n     * @return {?}\n     */\n    _checkHammerIsAvailable() {\n        if (this._hasCheckedHammer || !this._window) {\n            return;\n        }\n        if (this._areChecksEnabled() && !((/** @type {?} */ (this._window)))['Hammer'] && !this._hammerLoader) {\n            console.warn('Could not find HammerJS. Certain Angular Material components may not work correctly.');\n        }\n        this._hasCheckedHammer = true;\n    }\n}\nMatCommonModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [BidiModule],\n                exports: [BidiModule],\n            },] },\n];\n/** @nocollapse */\nMatCommonModule.ctorParameters = () => [\n    { type: Boolean, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_SANITY_CHECKS,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [HAMMER_LOADER,] }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Mixin to augment a directive with a `disabled` property.\n * @template T\n * @param {?} base\n * @return {?}\n */\nfunction mixinDisabled(base) {\n    return class extends base {\n        /**\n         * @param {...?} args\n         */\n        constructor(...args) {\n            super(...args);\n            this._disabled = false;\n        }\n        /**\n         * @return {?}\n         */\n        get disabled() { return this._disabled; }\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n    };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Mixin to augment a directive with a `color` property.\n * @template T\n * @param {?} base\n * @param {?=} defaultColor\n * @return {?}\n */\nfunction mixinColor(base, defaultColor) {\n    return class extends base {\n        /**\n         * @return {?}\n         */\n        get color() { return this._color; }\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set color(value) {\n            /** @type {?} */\n            const colorPalette = value || defaultColor;\n            if (colorPalette !== this._color) {\n                if (this._color) {\n                    this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n                }\n                if (colorPalette) {\n                    this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n                }\n                this._color = colorPalette;\n            }\n        }\n        /**\n         * @param {...?} args\n         */\n        constructor(...args) {\n            super(...args);\n            // Set the default color that can be specified from the mixin.\n            this.color = defaultColor;\n        }\n    };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Mixin to augment a directive with a `disableRipple` property.\n * @template T\n * @param {?} base\n * @return {?}\n */\nfunction mixinDisableRipple(base) {\n    return class extends base {\n        /**\n         * @param {...?} args\n         */\n        constructor(...args) {\n            super(...args);\n            this._disableRipple = false;\n        }\n        /**\n         * Whether the ripple effect is disabled or not.\n         * @return {?}\n         */\n        get disableRipple() { return this._disableRipple; }\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set disableRipple(value) { this._disableRipple = coerceBooleanProperty(value); }\n    };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Mixin to augment a directive with a `tabIndex` property.\n * @template T\n * @param {?} base\n * @param {?=} defaultTabIndex\n * @return {?}\n */\nfunction mixinTabIndex(base, defaultTabIndex = 0) {\n    return class extends base {\n        /**\n         * @param {...?} args\n         */\n        constructor(...args) {\n            super(...args);\n            this._tabIndex = defaultTabIndex;\n        }\n        /**\n         * @return {?}\n         */\n        get tabIndex() { return this.disabled ? -1 : this._tabIndex; }\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set tabIndex(value) {\n            // If the specified tabIndex value is null or undefined, fall back to the default value.\n            this._tabIndex = value != null ? value : defaultTabIndex;\n        }\n    };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n * @template T\n * @param {?} base\n * @return {?}\n */\nfunction mixinErrorState(base) {\n    return class extends base {\n        /**\n         * @param {...?} args\n         */\n        constructor(...args) {\n            super(...args);\n            /**\n             * Whether the component is in an error state.\n             */\n            this.errorState = false;\n            /**\n             * Stream that emits whenever the state of the input changes such that the wrapping\n             * `MatFormField` needs to run change detection.\n             */\n            this.stateChanges = new Subject();\n        }\n        /**\n         * @return {?}\n         */\n        updateErrorState() {\n            /** @type {?} */\n            const oldState = this.errorState;\n            /** @type {?} */\n            const parent = this._parentFormGroup || this._parentForm;\n            /** @type {?} */\n            const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n            /** @type {?} */\n            const control = this.ngControl ? (/** @type {?} */ (this.ngControl.control)) : null;\n            /** @type {?} */\n            const newState = matcher.isErrorState(control, parent);\n            if (newState !== oldState) {\n                this.errorState = newState;\n                this.stateChanges.next();\n            }\n        }\n    };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Mixin to augment a directive with an initialized property that will emits when ngOnInit ends.\n * @template T\n * @param {?} base\n * @return {?}\n */\nfunction mixinInitialized(base) {\n    return class extends base {\n        /**\n         * @param {...?} args\n         */\n        constructor(...args) {\n            super(...args);\n            /**\n             * Whether this directive has been marked as initialized.\n             */\n            this._isInitialized = false;\n            /**\n             * List of subscribers that subscribed before the directive was initialized. Should be notified\n             * during _markInitialized. Set to null after pending subscribers are notified, and should\n             * not expect to be populated after.\n             */\n            this._pendingSubscribers = [];\n            /**\n             * Observable stream that emits when the directive initializes. If already initialized, the\n             * subscriber is stored to be notified once _markInitialized is called.\n             */\n            this.initialized = new Observable((/**\n             * @param {?} subscriber\n             * @return {?}\n             */\n            subscriber => {\n                // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n                // when _markInitialized is called.\n                if (this._isInitialized) {\n                    this._notifySubscriber(subscriber);\n                }\n                else {\n                    (/** @type {?} */ (this._pendingSubscribers)).push(subscriber);\n                }\n            }));\n        }\n        /**\n         * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n         * of ngOnInit.\n         * \\@docs-private\n         * @return {?}\n         */\n        _markInitialized() {\n            if (this._isInitialized) {\n                throw Error('This directive has already been marked as initialized and ' +\n                    'should not be called twice.');\n            }\n            this._isInitialized = true;\n            (/** @type {?} */ (this._pendingSubscribers)).forEach(this._notifySubscriber);\n            this._pendingSubscribers = null;\n        }\n        /**\n         * Emits and completes the subscriber stream (should only emit once).\n         * @param {?} subscriber\n         * @return {?}\n         */\n        _notifySubscriber(subscriber) {\n            subscriber.next();\n            subscriber.complete();\n        }\n    };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * InjectionToken for datepicker that can be used to override default locale code.\n * @type {?}\n */\nconst MAT_DATE_LOCALE = new InjectionToken('MAT_DATE_LOCALE', {\n    providedIn: 'root',\n    factory: MAT_DATE_LOCALE_FACTORY,\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_DATE_LOCALE_FACTORY() {\n    return inject(LOCALE_ID);\n}\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * \\@breaking-change 8.0.0\n * @type {?}\n */\nconst MAT_DATE_LOCALE_PROVIDER = { provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID };\n/**\n * Adapts type `D` to be usable as a date by cdk-based components that work with dates.\n * @abstract\n * @template D\n */\nclass DateAdapter {\n    constructor() {\n        this._localeChanges = new Subject();\n    }\n    /**\n     * A stream that emits when the locale changes.\n     * @return {?}\n     */\n    get localeChanges() { return this._localeChanges; }\n    /**\n     * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n     * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n     * string). The default implementation does not allow any deserialization, it simply checks that\n     * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n     * method on all of its `\\@Input()` properties that accept dates. It is therefore possible to\n     * support passing values from your backend directly to these properties by overriding this method\n     * to also deserialize the format used by your backend.\n     * @param {?} value The value to be deserialized into a date object.\n     * @return {?} The deserialized date object, either a valid date, null if the value can be\n     *     deserialized into a null date (e.g. the empty string), or an invalid date.\n     */\n    deserialize(value) {\n        if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n            return value;\n        }\n        return this.invalid();\n    }\n    /**\n     * Sets the locale used for all dates.\n     * @param {?} locale The new locale.\n     * @return {?}\n     */\n    setLocale(locale) {\n        this.locale = locale;\n        this._localeChanges.next();\n    }\n    /**\n     * Compares two dates.\n     * @param {?} first The first date to compare.\n     * @param {?} second The second date to compare.\n     * @return {?} 0 if the dates are equal, a number less than 0 if the first date is earlier,\n     *     a number greater than 0 if the first date is later.\n     */\n    compareDate(first, second) {\n        return this.getYear(first) - this.getYear(second) ||\n            this.getMonth(first) - this.getMonth(second) ||\n            this.getDate(first) - this.getDate(second);\n    }\n    /**\n     * Checks if two dates are equal.\n     * @param {?} first The first date to check.\n     * @param {?} second The second date to check.\n     * @return {?} Whether the two dates are equal.\n     *     Null dates are considered equal to other null dates.\n     */\n    sameDate(first, second) {\n        if (first && second) {\n            /** @type {?} */\n            let firstValid = this.isValid(first);\n            /** @type {?} */\n            let secondValid = this.isValid(second);\n            if (firstValid && secondValid) {\n                return !this.compareDate(first, second);\n            }\n            return firstValid == secondValid;\n        }\n        return first == second;\n    }\n    /**\n     * Clamp the given date between min and max dates.\n     * @param {?} date The date to clamp.\n     * @param {?=} min The minimum value to allow. If null or omitted no min is enforced.\n     * @param {?=} max The maximum value to allow. If null or omitted no max is enforced.\n     * @return {?} `min` if `date` is less than `min`, `max` if date is greater than `max`,\n     *     otherwise `date`.\n     */\n    clampDate(date, min, max) {\n        if (min && this.compareDate(date, min) < 0) {\n            return min;\n        }\n        if (max && this.compareDate(date, max) > 0) {\n            return max;\n        }\n        return date;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst MAT_DATE_FORMATS = new InjectionToken('mat-date-formats');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/**\n * Whether the browser supports the Intl API.\n * @type {?}\n */\nlet SUPPORTS_INTL_API;\n// We need a try/catch around the reference to `Intl`, because accessing it in some cases can\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\n// the consumer is providing a polyfilled `Map`. See:\n// https://github.com/Microsoft/ChakraCore/issues/3189\n// https://github.com/angular/components/issues/15687\ntry {\n    SUPPORTS_INTL_API = typeof Intl != 'undefined';\n}\ncatch (_a) {\n    SUPPORTS_INTL_API = false;\n}\n/**\n * The default month names to use if Intl API is not available.\n * @type {?}\n */\nconst DEFAULT_MONTH_NAMES = {\n    'long': [\n        'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n        'October', 'November', 'December'\n    ],\n    'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n    'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\nconst ɵ0 = /**\n * @param {?} i\n * @return {?}\n */\ni => String(i + 1);\n/**\n * The default date names to use if Intl API is not available.\n * @type {?}\n */\nconst DEFAULT_DATE_NAMES = range(31, (ɵ0));\n/**\n * The default day of the week names to use if Intl API is not available.\n * @type {?}\n */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n    'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n    'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n * @type {?}\n */\nconst ISO_8601_REGEX = /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n/**\n * Creates an array and fills it with values.\n * @template T\n * @param {?} length\n * @param {?} valueFunction\n * @return {?}\n */\nfunction range(length, valueFunction) {\n    /** @type {?} */\n    const valuesArray = Array(length);\n    for (let i = 0; i < length; i++) {\n        valuesArray[i] = valueFunction(i);\n    }\n    return valuesArray;\n}\n/**\n * Adapts the native JS Date for use with cdk-based components that work with dates.\n */\nclass NativeDateAdapter extends DateAdapter {\n    /**\n     * @param {?} matDateLocale\n     * @param {?} platform\n     */\n    constructor(matDateLocale, platform) {\n        super();\n        /**\n         * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n         * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n         * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n         * will produce `'8/13/1800'`.\n         *\n         * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n         * getting the string representation of a Date object from its utc representation. We're keeping\n         * it here for sometime, just for precaution, in case we decide to revert some of these changes\n         * though.\n         */\n        this.useUtcForDisplay = true;\n        super.setLocale(matDateLocale);\n        // IE does its own time zone correction, so we disable this on IE.\n        this.useUtcForDisplay = !platform.TRIDENT;\n        this._clampDate = platform.TRIDENT || platform.EDGE;\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    getYear(date) {\n        return date.getFullYear();\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    getMonth(date) {\n        return date.getMonth();\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    getDate(date) {\n        return date.getDate();\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    getDayOfWeek(date) {\n        return date.getDay();\n    }\n    /**\n     * @param {?} style\n     * @return {?}\n     */\n    getMonthNames(style) {\n        if (SUPPORTS_INTL_API) {\n            /** @type {?} */\n            const dtf = new Intl.DateTimeFormat(this.locale, { month: style, timeZone: 'utc' });\n            return range(12, (/**\n             * @param {?} i\n             * @return {?}\n             */\n            i => this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1)))));\n        }\n        return DEFAULT_MONTH_NAMES[style];\n    }\n    /**\n     * @return {?}\n     */\n    getDateNames() {\n        if (SUPPORTS_INTL_API) {\n            /** @type {?} */\n            const dtf = new Intl.DateTimeFormat(this.locale, { day: 'numeric', timeZone: 'utc' });\n            return range(31, (/**\n             * @param {?} i\n             * @return {?}\n             */\n            i => this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, 0, i + 1)))));\n        }\n        return DEFAULT_DATE_NAMES;\n    }\n    /**\n     * @param {?} style\n     * @return {?}\n     */\n    getDayOfWeekNames(style) {\n        if (SUPPORTS_INTL_API) {\n            /** @type {?} */\n            const dtf = new Intl.DateTimeFormat(this.locale, { weekday: style, timeZone: 'utc' });\n            return range(7, (/**\n             * @param {?} i\n             * @return {?}\n             */\n            i => this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, 0, i + 1)))));\n        }\n        return DEFAULT_DAY_OF_WEEK_NAMES[style];\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    getYearName(date) {\n        if (SUPPORTS_INTL_API) {\n            /** @type {?} */\n            const dtf = new Intl.DateTimeFormat(this.locale, { year: 'numeric', timeZone: 'utc' });\n            return this._stripDirectionalityCharacters(this._format(dtf, date));\n        }\n        return String(this.getYear(date));\n    }\n    /**\n     * @return {?}\n     */\n    getFirstDayOfWeek() {\n        // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n        return 0;\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    getNumDaysInMonth(date) {\n        return this.getDate(this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + 1, 0));\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    clone(date) {\n        return new Date(date.getTime());\n    }\n    /**\n     * @param {?} year\n     * @param {?} month\n     * @param {?} date\n     * @return {?}\n     */\n    createDate(year, month, date) {\n        // Check for invalid month and date (except upper bound on date which we have to check after\n        // creating the Date).\n        if (month < 0 || month > 11) {\n            throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n        }\n        if (date < 1) {\n            throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n        }\n        /** @type {?} */\n        let result = this._createDateWithOverflow(year, month, date);\n        // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n        if (result.getMonth() != month) {\n            throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n        }\n        return result;\n    }\n    /**\n     * @return {?}\n     */\n    today() {\n        return new Date();\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    parse(value) {\n        // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n        // parameters.\n        if (typeof value == 'number') {\n            return new Date(value);\n        }\n        return value ? new Date(Date.parse(value)) : null;\n    }\n    /**\n     * @param {?} date\n     * @param {?} displayFormat\n     * @return {?}\n     */\n    format(date, displayFormat) {\n        if (!this.isValid(date)) {\n            throw Error('NativeDateAdapter: Cannot format invalid date.');\n        }\n        if (SUPPORTS_INTL_API) {\n            // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n            // if we attempt to format a date whose year is less than 1 or greater than 9999.\n            if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n                date = this.clone(date);\n                date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n            }\n            displayFormat = Object.assign({}, displayFormat, { timeZone: 'utc' });\n            /** @type {?} */\n            const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n            return this._stripDirectionalityCharacters(this._format(dtf, date));\n        }\n        return this._stripDirectionalityCharacters(date.toDateString());\n    }\n    /**\n     * @param {?} date\n     * @param {?} years\n     * @return {?}\n     */\n    addCalendarYears(date, years) {\n        return this.addCalendarMonths(date, years * 12);\n    }\n    /**\n     * @param {?} date\n     * @param {?} months\n     * @return {?}\n     */\n    addCalendarMonths(date, months) {\n        /** @type {?} */\n        let newDate = this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n        // It's possible to wind up in the wrong month if the original month has more days than the new\n        // month. In this case we want to go to the last day of the desired month.\n        // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n        // guarantee this.\n        if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n            newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n        }\n        return newDate;\n    }\n    /**\n     * @param {?} date\n     * @param {?} days\n     * @return {?}\n     */\n    addCalendarDays(date, days) {\n        return this._createDateWithOverflow(this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    toIso8601(date) {\n        return [\n            date.getUTCFullYear(),\n            this._2digit(date.getUTCMonth() + 1),\n            this._2digit(date.getUTCDate())\n        ].join('-');\n    }\n    /**\n     * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n     * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n     * invalid date for all other values.\n     * @param {?} value\n     * @return {?}\n     */\n    deserialize(value) {\n        if (typeof value === 'string') {\n            if (!value) {\n                return null;\n            }\n            // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n            // string is the right format first.\n            if (ISO_8601_REGEX.test(value)) {\n                /** @type {?} */\n                let date = new Date(value);\n                if (this.isValid(date)) {\n                    return date;\n                }\n            }\n        }\n        return super.deserialize(value);\n    }\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    isDateInstance(obj) {\n        return obj instanceof Date;\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    isValid(date) {\n        return !isNaN(date.getTime());\n    }\n    /**\n     * @return {?}\n     */\n    invalid() {\n        return new Date(NaN);\n    }\n    /**\n     * Creates a date but allows the month and date to overflow.\n     * @private\n     * @param {?} year\n     * @param {?} month\n     * @param {?} date\n     * @return {?}\n     */\n    _createDateWithOverflow(year, month, date) {\n        /** @type {?} */\n        const result = new Date(year, month, date);\n        // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n        // abbreviations for 19xx.\n        if (year >= 0 && year < 100) {\n            result.setFullYear(this.getYear(result) - 1900);\n        }\n        return result;\n    }\n    /**\n     * Pads a number to make it two digits.\n     * @private\n     * @param {?} n The number to pad.\n     * @return {?} The padded number.\n     */\n    _2digit(n) {\n        return ('00' + n).slice(-2);\n    }\n    /**\n     * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n     * other browsers do not. We remove them to make output consistent and because they interfere with\n     * date parsing.\n     * @private\n     * @param {?} str The string to strip direction characters from.\n     * @return {?} The stripped string.\n     */\n    _stripDirectionalityCharacters(str) {\n        return str.replace(/[\\u200e\\u200f]/g, '');\n    }\n    /**\n     * When converting Date object to string, javascript built-in functions may return wrong\n     * results because it applies its internal DST rules. The DST rules around the world change\n     * very frequently, and the current valid rule is not always valid in previous years though.\n     * We work around this problem building a new Date object which has its internal UTC\n     * representation with the local date and time.\n     * @private\n     * @param {?} dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n     *    timeZone set to 'utc' to work fine.\n     * @param {?} date Date from which we want to get the string representation according to dtf\n     * @return {?} A Date object with its UTC representation based on the passed in date info\n     */\n    _format(dtf, date) {\n        /** @type {?} */\n        const d = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n        return dtf.format(d);\n    }\n}\nNativeDateAdapter.decorators = [\n    { type: Injectable },\n];\n/** @nocollapse */\nNativeDateAdapter.ctorParameters = () => [\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_LOCALE,] }] },\n    { type: Platform }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\nconst MAT_NATIVE_DATE_FORMATS = {\n    parse: {\n        dateInput: null,\n    },\n    display: {\n        dateInput: { year: 'numeric', month: 'numeric', day: 'numeric' },\n        monthYearLabel: { year: 'numeric', month: 'short' },\n        dateA11yLabel: { year: 'numeric', month: 'long', day: 'numeric' },\n        monthYearA11yLabel: { year: 'numeric', month: 'long' },\n    }\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass NativeDateModule {\n}\nNativeDateModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [PlatformModule],\n                providers: [\n                    { provide: DateAdapter, useClass: NativeDateAdapter },\n                ],\n            },] },\n];\nconst ɵ0$1 = MAT_NATIVE_DATE_FORMATS;\nclass MatNativeDateModule {\n}\nMatNativeDateModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [NativeDateModule],\n                providers: [{ provide: MAT_DATE_FORMATS, useValue: ɵ0$1 }],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Error state matcher that matches when a control is invalid and dirty.\n */\nclass ShowOnDirtyErrorStateMatcher {\n    /**\n     * @param {?} control\n     * @param {?} form\n     * @return {?}\n     */\n    isErrorState(control, form) {\n        return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n    }\n}\nShowOnDirtyErrorStateMatcher.decorators = [\n    { type: Injectable },\n];\n/**\n * Provider that defines how form controls behave with regards to displaying error messages.\n */\nclass ErrorStateMatcher {\n    /**\n     * @param {?} control\n     * @param {?} form\n     * @return {?}\n     */\n    isErrorState(control, form) {\n        return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n    }\n}\nErrorStateMatcher.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] },\n];\n/** @nocollapse */ ErrorStateMatcher.ngInjectableDef = ɵɵdefineInjectable({ factory: function ErrorStateMatcher_Factory() { return new ErrorStateMatcher(); }, token: ErrorStateMatcher, providedIn: \"root\" });\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n * @type {?}\n */\nconst MAT_HAMMER_OPTIONS = new InjectionToken('MAT_HAMMER_OPTIONS');\n/** @type {?} */\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n];\nconst ɵ0$2 = /**\n * @return {?}\n */\n() => { }, ɵ1 = /**\n * @return {?}\n */\n() => { };\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n * @type {?}\n */\nconst noopHammerInstance = {\n    on: (ɵ0$2),\n    off: (ɵ1),\n};\n/**\n * Adjusts configuration of our gesture library, Hammer.\n */\nclass GestureConfig extends HammerGestureConfig {\n    /**\n     * @param {?=} _hammerOptions\n     * @param {?=} commonModule\n     */\n    constructor(_hammerOptions, commonModule) {\n        super();\n        this._hammerOptions = _hammerOptions;\n        /**\n         * List of new event names to add to the gesture support list\n         */\n        this.events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n        if (commonModule) {\n            commonModule._checkHammerIsAvailable();\n        }\n    }\n    /**\n     * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n     *\n     * Our gesture names come from the Material Design gestures spec:\n     * https://material.io/design/#gestures-touch-mechanics\n     *\n     * More information on default recognizers can be found in Hammer docs:\n     * http://hammerjs.github.io/recognizer-pan/\n     * http://hammerjs.github.io/recognizer-press/\n     *\n     * @param {?} element Element to which to assign the new HammerJS gestures.\n     * @return {?} Newly-created HammerJS instance.\n     */\n    buildHammer(element) {\n        /** @type {?} */\n        const hammer = typeof window !== 'undefined' ? ((/** @type {?} */ (window))).Hammer : null;\n        if (!hammer) {\n            // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n            // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n            // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n            // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n            // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n            // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n            // undefined).\n            // @breaking-change 8.0.0\n            return noopHammerInstance;\n        }\n        /** @type {?} */\n        const mc = new hammer(element, this._hammerOptions || undefined);\n        // Default Hammer Recognizers.\n        /** @type {?} */\n        const pan = new hammer.Pan();\n        /** @type {?} */\n        const swipe = new hammer.Swipe();\n        /** @type {?} */\n        const press = new hammer.Press();\n        // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n        // Otherwise the previous `recognizeWith` will be dropped.\n        // TODO: Confirm threshold numbers with Material Design UX Team\n        /** @type {?} */\n        const slide = this._createRecognizer(pan, { event: 'slide', threshold: 0 }, swipe);\n        /** @type {?} */\n        const longpress = this._createRecognizer(press, { event: 'longpress', time: 500 });\n        // Overwrite the default `pan` event to use the swipe event.\n        pan.recognizeWith(swipe);\n        // Since the slide event threshold is set to zero, the slide recognizer can fire and\n        // accidentally reset the longpress recognizer. In order to make sure that the two\n        // recognizers can run simultaneously but don't affect each other, we allow the slide\n        // recognizer to recognize while a longpress is being processed.\n        // See: https://github.com/hammerjs/hammer.js/blob/master/src/manager.js#L123-L124\n        longpress.recognizeWith(slide);\n        // Add customized gestures to Hammer manager\n        mc.add([swipe, press, pan, slide, longpress]);\n        return (/** @type {?} */ (mc));\n    }\n    /**\n     * Creates a new recognizer, without affecting the default recognizers of HammerJS\n     * @private\n     * @param {?} base\n     * @param {?} options\n     * @param {...?} inheritances\n     * @return {?}\n     */\n    _createRecognizer(base, options, ...inheritances) {\n        /** @type {?} */\n        let recognizer = new ((/** @type {?} */ (base.constructor)))(options);\n        inheritances.push(base);\n        inheritances.forEach((/**\n         * @param {?} item\n         * @return {?}\n         */\n        item => recognizer.recognizeWith(item)));\n        return recognizer;\n    }\n}\nGestureConfig.decorators = [\n    { type: Injectable },\n];\n/** @nocollapse */\nGestureConfig.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_HAMMER_OPTIONS,] }] },\n    { type: MatCommonModule, decorators: [{ type: Optional }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a \\@ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\nclass MatLine {\n}\nMatLine.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-line], [matLine]',\n                host: { 'class': 'mat-line' }\n            },] },\n];\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * \\@docs-private\n * @param {?} lines\n * @param {?} element\n * @return {?}\n */\nfunction setLines(lines, element) {\n    // Note: doesn't need to unsubscribe, because `changes`\n    // gets completed by Angular when the view is destroyed.\n    lines.changes.pipe(startWith(lines)).subscribe((/**\n     * @param {?} __0\n     * @return {?}\n     */\n    ({ length }) => {\n        setClass(element, 'mat-2-line', false);\n        setClass(element, 'mat-3-line', false);\n        setClass(element, 'mat-multi-line', false);\n        if (length === 2 || length === 3) {\n            setClass(element, `mat-${length}-line`, true);\n        }\n        else if (length > 3) {\n            setClass(element, `mat-multi-line`, true);\n        }\n    }));\n}\n/**\n * Adds or removes a class from an element.\n * @param {?} element\n * @param {?} className\n * @param {?} isAdd\n * @return {?}\n */\nfunction setClass(element, className, isAdd) {\n    /** @type {?} */\n    const classList = element.nativeElement.classList;\n    isAdd ? classList.add(className) : classList.remove(className);\n}\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * \\@docs-private\n * @deprecated Use `setLines` instead.\n * \\@breaking-change 8.0.0\n */\nclass MatLineSetter {\n    /**\n     * @param {?} lines\n     * @param {?} element\n     */\n    constructor(lines, element) {\n        setLines(lines, element);\n    }\n}\nclass MatLineModule {\n}\nMatLineModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [MatCommonModule],\n                exports: [MatLine, MatCommonModule],\n                declarations: [MatLine],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @enum {number} */\nconst RippleState = {\n    FADING_IN: 0, VISIBLE: 1, FADING_OUT: 2, HIDDEN: 3,\n};\nRippleState[RippleState.FADING_IN] = 'FADING_IN';\nRippleState[RippleState.VISIBLE] = 'VISIBLE';\nRippleState[RippleState.FADING_OUT] = 'FADING_OUT';\nRippleState[RippleState.HIDDEN] = 'HIDDEN';\n/**\n * Reference to a previously launched ripple element.\n */\nclass RippleRef {\n    /**\n     * @param {?} _renderer\n     * @param {?} element\n     * @param {?} config\n     */\n    constructor(_renderer, element, config) {\n        this._renderer = _renderer;\n        this.element = element;\n        this.config = config;\n        /**\n         * Current state of the ripple.\n         */\n        this.state = RippleState.HIDDEN;\n    }\n    /**\n     * Fades out the ripple element.\n     * @return {?}\n     */\n    fadeOut() {\n        this._renderer.fadeOutRipple(this);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n * @type {?}\n */\nconst defaultRippleAnimationConfig = {\n    enterDuration: 450,\n    exitDuration: 400\n};\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n * @type {?}\n */\nconst ignoreMouseEventsTimeout = 800;\n/**\n * Options that apply to all the event listeners that are bound by the ripple renderer.\n * @type {?}\n */\nconst passiveEventOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * \\@docs-private\n */\nclass RippleRenderer {\n    /**\n     * @param {?} _target\n     * @param {?} _ngZone\n     * @param {?} elementOrElementRef\n     * @param {?} platform\n     */\n    constructor(_target, _ngZone, elementOrElementRef, platform) {\n        this._target = _target;\n        this._ngZone = _ngZone;\n        /**\n         * Whether the pointer is currently down or not.\n         */\n        this._isPointerDown = false;\n        /**\n         * Events to be registered on the trigger element.\n         */\n        this._triggerEvents = new Map();\n        /**\n         * Set of currently active ripple references.\n         */\n        this._activeRipples = new Set();\n        /**\n         * Function being called whenever the trigger is being pressed using mouse.\n         */\n        this._onMousedown = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            // Screen readers will fire fake mouse events for space/enter. Skip launching a\n            // ripple in this case for consistency with the non-screen-reader experience.\n            /** @type {?} */\n            const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n            /** @type {?} */\n            const isSyntheticEvent = this._lastTouchStartEvent &&\n                Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n            if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n                this._isPointerDown = true;\n                this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n            }\n        });\n        /**\n         * Function being called whenever the trigger is being pressed using touch.\n         */\n        this._onTouchStart = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            if (!this._target.rippleDisabled) {\n                // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n                // events will launch a second ripple if we don't ignore mouse events for a specific\n                // time after a touchstart event.\n                this._lastTouchStartEvent = Date.now();\n                this._isPointerDown = true;\n                // Use `changedTouches` so we skip any touches where the user put\n                // their finger down, but used another finger to tap the element again.\n                /** @type {?} */\n                const touches = event.changedTouches;\n                for (let i = 0; i < touches.length; i++) {\n                    this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n                }\n            }\n        });\n        /**\n         * Function being called whenever the trigger is being released.\n         */\n        this._onPointerUp = (/**\n         * @return {?}\n         */\n        () => {\n            if (!this._isPointerDown) {\n                return;\n            }\n            this._isPointerDown = false;\n            // Fade-out all ripples that are visible and not persistent.\n            this._activeRipples.forEach((/**\n             * @param {?} ripple\n             * @return {?}\n             */\n            ripple => {\n                // By default, only ripples that are completely visible will fade out on pointer release.\n                // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n                /** @type {?} */\n                const isVisible = ripple.state === RippleState.VISIBLE ||\n                    ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n                if (!ripple.config.persistent && isVisible) {\n                    ripple.fadeOut();\n                }\n            }));\n        });\n        // Only do anything if we're on the browser.\n        if (platform.isBrowser) {\n            this._containerElement = coerceElement(elementOrElementRef);\n            // Specify events which need to be registered on the trigger.\n            this._triggerEvents\n                .set('mousedown', this._onMousedown)\n                .set('mouseup', this._onPointerUp)\n                .set('mouseleave', this._onPointerUp)\n                .set('touchstart', this._onTouchStart)\n                .set('touchend', this._onPointerUp)\n                .set('touchcancel', this._onPointerUp);\n        }\n    }\n    /**\n     * Fades in a ripple at the given coordinates.\n     * @param {?} x Coordinate within the element, along the X axis at which to start the ripple.\n     * @param {?} y Coordinate within the element, along the Y axis at which to start the ripple.\n     * @param {?=} config Extra ripple options.\n     * @return {?}\n     */\n    fadeInRipple(x, y, config = {}) {\n        /** @type {?} */\n        const containerRect = this._containerRect =\n            this._containerRect || this._containerElement.getBoundingClientRect();\n        /** @type {?} */\n        const animationConfig = Object.assign({}, defaultRippleAnimationConfig, config.animation);\n        if (config.centered) {\n            x = containerRect.left + containerRect.width / 2;\n            y = containerRect.top + containerRect.height / 2;\n        }\n        /** @type {?} */\n        const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n        /** @type {?} */\n        const offsetX = x - containerRect.left;\n        /** @type {?} */\n        const offsetY = y - containerRect.top;\n        /** @type {?} */\n        const duration = animationConfig.enterDuration;\n        /** @type {?} */\n        const ripple = document.createElement('div');\n        ripple.classList.add('mat-ripple-element');\n        ripple.style.left = `${offsetX - radius}px`;\n        ripple.style.top = `${offsetY - radius}px`;\n        ripple.style.height = `${radius * 2}px`;\n        ripple.style.width = `${radius * 2}px`;\n        // If the color is not set, the default CSS color will be used.\n        ripple.style.backgroundColor = config.color || null;\n        ripple.style.transitionDuration = `${duration}ms`;\n        this._containerElement.appendChild(ripple);\n        // By default the browser does not recalculate the styles of dynamically created\n        // ripple elements. This is critical because then the `scale` would not animate properly.\n        enforceStyleRecalculation(ripple);\n        ripple.style.transform = 'scale(1)';\n        // Exposed reference to the ripple that will be returned.\n        /** @type {?} */\n        const rippleRef = new RippleRef(this, ripple, config);\n        rippleRef.state = RippleState.FADING_IN;\n        // Add the ripple reference to the list of all active ripples.\n        this._activeRipples.add(rippleRef);\n        if (!config.persistent) {\n            this._mostRecentTransientRipple = rippleRef;\n        }\n        // Wait for the ripple element to be completely faded in.\n        // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n        this._runTimeoutOutsideZone((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n            rippleRef.state = RippleState.VISIBLE;\n            // When the timer runs out while the user has kept their pointer down, we want to\n            // keep only the persistent ripples and the latest transient ripple. We do this,\n            // because we don't want stacked transient ripples to appear after their enter\n            // animation has finished.\n            if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n                rippleRef.fadeOut();\n            }\n        }), duration);\n        return rippleRef;\n    }\n    /**\n     * Fades out a ripple reference.\n     * @param {?} rippleRef\n     * @return {?}\n     */\n    fadeOutRipple(rippleRef) {\n        /** @type {?} */\n        const wasActive = this._activeRipples.delete(rippleRef);\n        if (rippleRef === this._mostRecentTransientRipple) {\n            this._mostRecentTransientRipple = null;\n        }\n        // Clear out the cached bounding rect if we have no more ripples.\n        if (!this._activeRipples.size) {\n            this._containerRect = null;\n        }\n        // For ripples that are not active anymore, don't re-run the fade-out animation.\n        if (!wasActive) {\n            return;\n        }\n        /** @type {?} */\n        const rippleEl = rippleRef.element;\n        /** @type {?} */\n        const animationConfig = Object.assign({}, defaultRippleAnimationConfig, rippleRef.config.animation);\n        rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n        rippleEl.style.opacity = '0';\n        rippleRef.state = RippleState.FADING_OUT;\n        // Once the ripple faded out, the ripple can be safely removed from the DOM.\n        this._runTimeoutOutsideZone((/**\n         * @return {?}\n         */\n        () => {\n            rippleRef.state = RippleState.HIDDEN;\n            (/** @type {?} */ (rippleEl.parentNode)).removeChild(rippleEl);\n        }), animationConfig.exitDuration);\n    }\n    /**\n     * Fades out all currently active ripples.\n     * @return {?}\n     */\n    fadeOutAll() {\n        this._activeRipples.forEach((/**\n         * @param {?} ripple\n         * @return {?}\n         */\n        ripple => ripple.fadeOut()));\n    }\n    /**\n     * Sets up the trigger event listeners\n     * @param {?} elementOrElementRef\n     * @return {?}\n     */\n    setupTriggerEvents(elementOrElementRef) {\n        /** @type {?} */\n        const element = coerceElement(elementOrElementRef);\n        if (!element || element === this._triggerElement) {\n            return;\n        }\n        // Remove all previously registered event listeners from the trigger element.\n        this._removeTriggerEvents();\n        this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            this._triggerEvents.forEach((/**\n             * @param {?} fn\n             * @param {?} type\n             * @return {?}\n             */\n            (fn, type) => {\n                element.addEventListener(type, fn, passiveEventOptions);\n            }));\n        }));\n        this._triggerElement = element;\n    }\n    /**\n     * Runs a timeout outside of the Angular zone to avoid triggering the change detection.\n     * @private\n     * @param {?} fn\n     * @param {?=} delay\n     * @return {?}\n     */\n    _runTimeoutOutsideZone(fn, delay = 0) {\n        this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => setTimeout(fn, delay)));\n    }\n    /**\n     * Removes previously registered event listeners from the trigger element.\n     * @return {?}\n     */\n    _removeTriggerEvents() {\n        if (this._triggerElement) {\n            this._triggerEvents.forEach((/**\n             * @param {?} fn\n             * @param {?} type\n             * @return {?}\n             */\n            (fn, type) => {\n                (/** @type {?} */ (this._triggerElement)).removeEventListener(type, fn, passiveEventOptions);\n            }));\n        }\n    }\n}\n/**\n * Enforces a style recalculation of a DOM element by computing its styles.\n * @param {?} element\n * @return {?}\n */\nfunction enforceStyleRecalculation(element) {\n    // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n    // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n    // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n    window.getComputedStyle(element).getPropertyValue('opacity');\n}\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n * @param {?} x\n * @param {?} y\n * @param {?} rect\n * @return {?}\n */\nfunction distanceToFurthestCorner(x, y, rect) {\n    /** @type {?} */\n    const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n    /** @type {?} */\n    const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n    return Math.sqrt(distX * distX + distY * distY);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used to specify the global ripple options.\n * @type {?}\n */\nconst MAT_RIPPLE_GLOBAL_OPTIONS = new InjectionToken('mat-ripple-global-options');\nclass MatRipple {\n    /**\n     * @param {?} _elementRef\n     * @param {?} ngZone\n     * @param {?} platform\n     * @param {?=} globalOptions\n     * @param {?=} animationMode\n     */\n    constructor(_elementRef, ngZone, platform, globalOptions, animationMode) {\n        this._elementRef = _elementRef;\n        /**\n         * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n         * will be the distance from the center of the ripple to the furthest corner of the host element's\n         * bounding rectangle.\n         */\n        this.radius = 0;\n        this._disabled = false;\n        /**\n         * Whether ripple directive is initialized and the input bindings are set.\n         */\n        this._isInitialized = false;\n        this._globalOptions = globalOptions || {};\n        this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n        if (animationMode === 'NoopAnimations') {\n            this._globalOptions.animation = { enterDuration: 0, exitDuration: 0 };\n        }\n    }\n    /**\n     * Whether click events will not trigger the ripple. Ripples can be still launched manually\n     * by using the `launch()` method.\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = value;\n        this._setupTriggerEventsIfEnabled();\n    }\n    /**\n     * The element that triggers the ripple when click events are received.\n     * Defaults to the directive's host element.\n     * @return {?}\n     */\n    get trigger() { return this._trigger || this._elementRef.nativeElement; }\n    /**\n     * @param {?} trigger\n     * @return {?}\n     */\n    set trigger(trigger) {\n        this._trigger = trigger;\n        this._setupTriggerEventsIfEnabled();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._isInitialized = true;\n        this._setupTriggerEventsIfEnabled();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._rippleRenderer._removeTriggerEvents();\n    }\n    /**\n     * Fades out all currently showing ripple elements.\n     * @return {?}\n     */\n    fadeOutAll() {\n        this._rippleRenderer.fadeOutAll();\n    }\n    /**\n     * Ripple configuration from the directive's input values.\n     * \\@docs-private Implemented as part of RippleTarget\n     * @return {?}\n     */\n    get rippleConfig() {\n        return {\n            centered: this.centered,\n            radius: this.radius,\n            color: this.color,\n            animation: Object.assign({}, this._globalOptions.animation, this.animation),\n            terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n        };\n    }\n    /**\n     * Whether ripples on pointer-down are disabled or not.\n     * \\@docs-private Implemented as part of RippleTarget\n     * @return {?}\n     */\n    get rippleDisabled() {\n        return this.disabled || !!this._globalOptions.disabled;\n    }\n    /**\n     * Sets up the trigger event listeners if ripples are enabled.\n     * @private\n     * @return {?}\n     */\n    _setupTriggerEventsIfEnabled() {\n        if (!this.disabled && this._isInitialized) {\n            this._rippleRenderer.setupTriggerEvents(this.trigger);\n        }\n    }\n    /**\n     * Launches a manual ripple at the specified coordinated or just by the ripple config.\n     * @param {?} configOrX\n     * @param {?=} y\n     * @param {?=} config\n     * @return {?}\n     */\n    launch(configOrX, y = 0, config) {\n        if (typeof configOrX === 'number') {\n            return this._rippleRenderer.fadeInRipple(configOrX, y, Object.assign({}, this.rippleConfig, config));\n        }\n        else {\n            return this._rippleRenderer.fadeInRipple(0, 0, Object.assign({}, this.rippleConfig, configOrX));\n        }\n    }\n}\nMatRipple.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-ripple], [matRipple]',\n                exportAs: 'matRipple',\n                host: {\n                    'class': 'mat-ripple',\n                    '[class.mat-ripple-unbounded]': 'unbounded'\n                }\n            },] },\n];\n/** @nocollapse */\nMatRipple.ctorParameters = () => [\n    { type: ElementRef },\n    { type: NgZone },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RIPPLE_GLOBAL_OPTIONS,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatRipple.propDecorators = {\n    color: [{ type: Input, args: ['matRippleColor',] }],\n    unbounded: [{ type: Input, args: ['matRippleUnbounded',] }],\n    centered: [{ type: Input, args: ['matRippleCentered',] }],\n    radius: [{ type: Input, args: ['matRippleRadius',] }],\n    animation: [{ type: Input, args: ['matRippleAnimation',] }],\n    disabled: [{ type: Input, args: ['matRippleDisabled',] }],\n    trigger: [{ type: Input, args: ['matRippleTrigger',] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatRippleModule {\n}\nMatRippleModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [MatCommonModule, PlatformModule],\n                exports: [MatRipple, MatCommonModule],\n                declarations: [MatRipple],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * \\@docs-private\n */\nclass MatPseudoCheckbox {\n    /**\n     * @param {?=} _animationMode\n     */\n    constructor(_animationMode) {\n        this._animationMode = _animationMode;\n        /**\n         * Display state of the checkbox.\n         */\n        this.state = 'unchecked';\n        /**\n         * Whether the checkbox is disabled.\n         */\n        this.disabled = false;\n    }\n}\nMatPseudoCheckbox.decorators = [\n    { type: Component, args: [{encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                selector: 'mat-pseudo-checkbox',\n                styles: [\".mat-pseudo-checkbox{width:16px;height:16px;border:2px solid;border-radius:2px;cursor:pointer;display:inline-block;vertical-align:middle;box-sizing:border-box;position:relative;flex-shrink:0;transition:border-color 90ms cubic-bezier(0,0,.2,.1),background-color 90ms cubic-bezier(0,0,.2,.1)}.mat-pseudo-checkbox::after{position:absolute;opacity:0;content:'';border-bottom:2px solid currentColor;transition:opacity 90ms cubic-bezier(0,0,.2,.1)}.mat-pseudo-checkbox.mat-pseudo-checkbox-checked,.mat-pseudo-checkbox.mat-pseudo-checkbox-indeterminate{border-color:transparent}._mat-animation-noopable.mat-pseudo-checkbox{transition:none;animation:none}._mat-animation-noopable.mat-pseudo-checkbox::after{transition:none}.mat-pseudo-checkbox-disabled{cursor:default}.mat-pseudo-checkbox-indeterminate::after{top:5px;left:1px;width:10px;opacity:1;border-radius:2px}.mat-pseudo-checkbox-checked::after{top:2.4px;left:1px;width:8px;height:3px;border-left:2px solid currentColor;transform:rotate(-45deg);opacity:1;box-sizing:content-box}\"],\n                template: '',\n                host: {\n                    'class': 'mat-pseudo-checkbox',\n                    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n                    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n                    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                },\n            },] },\n];\n/** @nocollapse */\nMatPseudoCheckbox.ctorParameters = () => [\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatPseudoCheckbox.propDecorators = {\n    state: [{ type: Input }],\n    disabled: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatPseudoCheckboxModule {\n}\nMatPseudoCheckboxModule.decorators = [\n    { type: NgModule, args: [{\n                exports: [MatPseudoCheckbox],\n                declarations: [MatPseudoCheckbox]\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to MatOptgroup.\n/**\n * \\@docs-private\n */\nclass MatOptgroupBase {\n}\n/** @type {?} */\nconst _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n// Counter for unique group ids.\n/** @type {?} */\nlet _uniqueOptgroupIdCounter = 0;\n/**\n * Component that is used to group instances of `mat-option`.\n */\nclass MatOptgroup extends _MatOptgroupMixinBase {\n    constructor() {\n        super(...arguments);\n        /**\n         * Unique id for the underlying label.\n         */\n        this._labelId = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n    }\n}\nMatOptgroup.decorators = [\n    { type: Component, args: [{selector: 'mat-optgroup',\n                exportAs: 'matOptgroup',\n                template: \"<label class=\\\"mat-optgroup-label\\\" [id]=\\\"_labelId\\\">{{ label }}<ng-content></ng-content></label><ng-content select=\\\"mat-option, ng-container\\\"></ng-content>\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                inputs: ['disabled'],\n                styles: [\".mat-optgroup-label{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-optgroup-label[disabled]{cursor:default}[dir=rtl] .mat-optgroup-label{text-align:right}.mat-optgroup-label .mat-icon{margin-right:16px;vertical-align:middle}.mat-optgroup-label .mat-icon svg{vertical-align:top}[dir=rtl] .mat-optgroup-label .mat-icon{margin-left:16px;margin-right:0}\"],\n                host: {\n                    'class': 'mat-optgroup',\n                    'role': 'group',\n                    '[class.mat-optgroup-disabled]': 'disabled',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-labelledby]': '_labelId',\n                }\n            },] },\n];\nMatOptgroup.propDecorators = {\n    label: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n * @type {?}\n */\nlet _uniqueIdCounter = 0;\n/**\n * Event object emitted by MatOption when selected or deselected.\n */\nclass MatOptionSelectionChange {\n    /**\n     * @param {?} source\n     * @param {?=} isUserInput\n     */\n    constructor(source, isUserInput = false) {\n        this.source = source;\n        this.isUserInput = isUserInput;\n    }\n}\n/**\n * Injection token used to provide the parent component to options.\n * @type {?}\n */\nconst MAT_OPTION_PARENT_COMPONENT = new InjectionToken('MAT_OPTION_PARENT_COMPONENT');\n/**\n * Single option inside of a `<mat-select>` element.\n */\nclass MatOption {\n    /**\n     * @param {?} _element\n     * @param {?} _changeDetectorRef\n     * @param {?} _parent\n     * @param {?} group\n     */\n    constructor(_element, _changeDetectorRef, _parent, group) {\n        this._element = _element;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._parent = _parent;\n        this.group = group;\n        this._selected = false;\n        this._active = false;\n        this._disabled = false;\n        this._mostRecentViewValue = '';\n        /**\n         * The unique ID of the option.\n         */\n        this.id = `mat-option-${_uniqueIdCounter++}`;\n        /**\n         * Event emitted when the option is selected or deselected.\n         */\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onSelectionChange = new EventEmitter();\n        /**\n         * Emits when the state of the option changes and any parents have to be notified.\n         */\n        this._stateChanges = new Subject();\n    }\n    /**\n     * Whether the wrapping component is in multiple selection mode.\n     * @return {?}\n     */\n    get multiple() { return this._parent && this._parent.multiple; }\n    /**\n     * Whether or not the option is currently selected.\n     * @return {?}\n     */\n    get selected() { return this._selected; }\n    /**\n     * Whether the option is disabled.\n     * @return {?}\n     */\n    get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n    /**\n     * Whether ripples for the option are disabled.\n     * @return {?}\n     */\n    get disableRipple() { return this._parent && this._parent.disableRipple; }\n    /**\n     * Whether or not the option is currently active and ready to be selected.\n     * An active option displays styles as if it is focused, but the\n     * focus is actually retained somewhere else. This comes in handy\n     * for components like autocomplete where focus must remain on the input.\n     * @return {?}\n     */\n    get active() {\n        return this._active;\n    }\n    /**\n     * The displayed value of the option. It is necessary to show the selected option in the\n     * select's trigger.\n     * @return {?}\n     */\n    get viewValue() {\n        // TODO(kara): Add input property alternative for node envs.\n        return (this._getHostElement().textContent || '').trim();\n    }\n    /**\n     * Selects the option.\n     * @return {?}\n     */\n    select() {\n        if (!this._selected) {\n            this._selected = true;\n            this._changeDetectorRef.markForCheck();\n            this._emitSelectionChangeEvent();\n        }\n    }\n    /**\n     * Deselects the option.\n     * @return {?}\n     */\n    deselect() {\n        if (this._selected) {\n            this._selected = false;\n            this._changeDetectorRef.markForCheck();\n            this._emitSelectionChangeEvent();\n        }\n    }\n    /**\n     * Sets focus onto this option.\n     * @param {?=} _origin\n     * @param {?=} options\n     * @return {?}\n     */\n    focus(_origin, options) {\n        // Note that we aren't using `_origin`, but we need to keep it because some internal consumers\n        // use `MatOption` in a `FocusKeyManager` and we need it to match `FocusableOption`.\n        /** @type {?} */\n        const element = this._getHostElement();\n        if (typeof element.focus === 'function') {\n            element.focus(options);\n        }\n    }\n    /**\n     * This method sets display styles on the option to make it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     * @return {?}\n     */\n    setActiveStyles() {\n        if (!this._active) {\n            this._active = true;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * This method removes display styles on the option that made it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     * @return {?}\n     */\n    setInactiveStyles() {\n        if (this._active) {\n            this._active = false;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Gets the label to be used when determining whether the option should be focused.\n     * @return {?}\n     */\n    getLabel() {\n        return this.viewValue;\n    }\n    /**\n     * Ensures the option is selected when activated from the keyboard.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleKeydown(event) {\n        if ((event.keyCode === ENTER || event.keyCode === SPACE) && !hasModifierKey(event)) {\n            this._selectViaInteraction();\n            // Prevent the page from scrolling down and form submits.\n            event.preventDefault();\n        }\n    }\n    /**\n     * `Selects the option while indicating the selection came from the user. Used to\n     * determine if the select's view -> model callback should be invoked.`\n     * @return {?}\n     */\n    _selectViaInteraction() {\n        if (!this.disabled) {\n            this._selected = this.multiple ? !this._selected : true;\n            this._changeDetectorRef.markForCheck();\n            this._emitSelectionChangeEvent(true);\n        }\n    }\n    /**\n     * Gets the `aria-selected` value for the option. We explicitly omit the `aria-selected`\n     * attribute from single-selection, unselected options. Including the `aria-selected=\"false\"`\n     * attributes adds a significant amount of noise to screen-reader users without providing useful\n     * information.\n     * @return {?}\n     */\n    _getAriaSelected() {\n        return this.selected || (this.multiple ? false : null);\n    }\n    /**\n     * Returns the correct tabindex for the option depending on disabled state.\n     * @return {?}\n     */\n    _getTabIndex() {\n        return this.disabled ? '-1' : '0';\n    }\n    /**\n     * Gets the host DOM element.\n     * @return {?}\n     */\n    _getHostElement() {\n        return this._element.nativeElement;\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewChecked() {\n        // Since parent components could be using the option's label to display the selected values\n        // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n        // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n        // relatively cheap, however we still limit them only to selected options in order to avoid\n        // hitting the DOM too often.\n        if (this._selected) {\n            /** @type {?} */\n            const viewValue = this.viewValue;\n            if (viewValue !== this._mostRecentViewValue) {\n                this._mostRecentViewValue = viewValue;\n                this._stateChanges.next();\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n    /**\n     * Emits the selection change event.\n     * @private\n     * @param {?=} isUserInput\n     * @return {?}\n     */\n    _emitSelectionChangeEvent(isUserInput = false) {\n        this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n    }\n}\nMatOption.decorators = [\n    { type: Component, args: [{selector: 'mat-option',\n                exportAs: 'matOption',\n                host: {\n                    'role': 'option',\n                    '[attr.tabindex]': '_getTabIndex()',\n                    '[class.mat-selected]': 'selected',\n                    '[class.mat-option-multiple]': 'multiple',\n                    '[class.mat-active]': 'active',\n                    '[id]': 'id',\n                    '[attr.aria-selected]': '_getAriaSelected()',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[class.mat-option-disabled]': 'disabled',\n                    '(click)': '_selectViaInteraction()',\n                    '(keydown)': '_handleKeydown($event)',\n                    'class': 'mat-option',\n                },\n                styles: [\".mat-option{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;position:relative;cursor:pointer;outline:0;display:flex;flex-direction:row;max-width:100%;box-sizing:border-box;align-items:center;-webkit-tap-highlight-color:transparent}.mat-option[disabled]{cursor:default}[dir=rtl] .mat-option{text-align:right}.mat-option .mat-icon{margin-right:16px;vertical-align:middle}.mat-option .mat-icon svg{vertical-align:top}[dir=rtl] .mat-option .mat-icon{margin-left:16px;margin-right:0}.mat-option[aria-disabled=true]{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-optgroup .mat-option:not(.mat-option-multiple){padding-left:32px}[dir=rtl] .mat-optgroup .mat-option:not(.mat-option-multiple){padding-left:16px;padding-right:32px}@media (-ms-high-contrast:active){.mat-option{margin:0 1px}.mat-option.mat-active{border:solid 1px currentColor;margin:0}}.mat-option-text{display:inline-block;flex-grow:1;overflow:hidden;text-overflow:ellipsis}.mat-option .mat-option-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}@media (-ms-high-contrast:active){.mat-option .mat-option-ripple{opacity:.5}}.mat-option-pseudo-checkbox{margin-right:8px}[dir=rtl] .mat-option-pseudo-checkbox{margin-left:8px;margin-right:0}\"],\n                template: \"<mat-pseudo-checkbox *ngIf=\\\"multiple\\\" class=\\\"mat-option-pseudo-checkbox\\\" [state]=\\\"selected ? 'checked' : ''\\\" [disabled]=\\\"disabled\\\"></mat-pseudo-checkbox><span class=\\\"mat-option-text\\\"><ng-content></ng-content></span><div class=\\\"mat-option-ripple\\\" mat-ripple [matRippleTrigger]=\\\"_getHostElement()\\\" [matRippleDisabled]=\\\"disabled || disableRipple\\\"></div>\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n            },] },\n];\n/** @nocollapse */\nMatOption.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_OPTION_PARENT_COMPONENT,] }] },\n    { type: MatOptgroup, decorators: [{ type: Optional }] }\n];\nMatOption.propDecorators = {\n    value: [{ type: Input }],\n    id: [{ type: Input }],\n    disabled: [{ type: Input }],\n    onSelectionChange: [{ type: Output }]\n};\n/**\n * Counts the amount of option group labels that precede the specified option.\n * \\@docs-private\n * @param {?} optionIndex Index of the option at which to start counting.\n * @param {?} options Flat list of all of the options.\n * @param {?} optionGroups Flat list of all of the option groups.\n * @return {?}\n */\nfunction _countGroupLabelsBeforeOption(optionIndex, options, optionGroups) {\n    if (optionGroups.length) {\n        /** @type {?} */\n        let optionsArray = options.toArray();\n        /** @type {?} */\n        let groups = optionGroups.toArray();\n        /** @type {?} */\n        let groupCounter = 0;\n        for (let i = 0; i < optionIndex + 1; i++) {\n            if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n                groupCounter++;\n            }\n        }\n        return groupCounter;\n    }\n    return 0;\n}\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * \\@docs-private\n * @param {?} optionIndex Index of the option to be scrolled into the view.\n * @param {?} optionHeight Height of the options.\n * @param {?} currentScrollPosition Current scroll position of the panel.\n * @param {?} panelHeight Height of the panel.\n * @return {?}\n */\nfunction _getOptionScrollPosition(optionIndex, optionHeight, currentScrollPosition, panelHeight) {\n    /** @type {?} */\n    const optionOffset = optionIndex * optionHeight;\n    if (optionOffset < currentScrollPosition) {\n        return optionOffset;\n    }\n    if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n        return Math.max(0, optionOffset - panelHeight + optionHeight);\n    }\n    return currentScrollPosition;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatOptionModule {\n}\nMatOptionModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n                exports: [MatOption, MatOptgroup],\n                declarations: [MatOption, MatOptgroup]\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * InjectionToken that can be used to specify the global label options.\n * @type {?}\n */\nconst MAT_LABEL_GLOBAL_OPTIONS = new InjectionToken('mat-label-global-options');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n * \\@docs-private\n * \\@breaking-change 8.0.0 Remove this with V8 since it was only targeted for testing.\n * @type {?}\n */\nconst JAN = 0;\n/** @type {?} */\nconst FEB = 1;\n/** @type {?} */\nconst MAR = 2;\n/** @type {?} */\nconst APR = 3;\n/** @type {?} */\nconst MAY = 4;\n/** @type {?} */\nconst JUN = 5;\n/** @type {?} */\nconst JUL = 6;\n/** @type {?} */\nconst AUG = 7;\n/** @type {?} */\nconst SEP = 8;\n/** @type {?} */\nconst OCT = 9;\n/** @type {?} */\nconst NOV = 10;\n/** @type {?} */\nconst DEC = 11;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { VERSION$1 as VERSION, AnimationCurves, AnimationDurations, MatCommonModule, MATERIAL_SANITY_CHECKS, mixinDisabled, mixinColor, mixinDisableRipple, mixinTabIndex, mixinErrorState, mixinInitialized, NativeDateModule, MatNativeDateModule, MAT_DATE_LOCALE_FACTORY, MAT_DATE_LOCALE, MAT_DATE_LOCALE_PROVIDER, DateAdapter, MAT_DATE_FORMATS, NativeDateAdapter, MAT_NATIVE_DATE_FORMATS, ShowOnDirtyErrorStateMatcher, ErrorStateMatcher, MAT_HAMMER_OPTIONS, GestureConfig, setLines, MatLine, MatLineSetter, MatLineModule, MatOptionModule, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionSelectionChange, MAT_OPTION_PARENT_COMPONENT, MatOption, MatOptgroup, MAT_LABEL_GLOBAL_OPTIONS, MatRippleModule, MAT_RIPPLE_GLOBAL_OPTIONS, MatRipple, RippleState, RippleRef, defaultRippleAnimationConfig, RippleRenderer, MatPseudoCheckboxModule, MatPseudoCheckbox, JAN, FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV, DEC, MATERIAL_SANITY_CHECKS_FACTORY as ɵa1 };\n//# sourceMappingURL=core.js.map\n"],"sourceRoot":"webpack:///","file":"default~menu-menu-module~pages-feedback-feedback-module-es5.js"}